import { TwClassGroup } from "./stylingSettings.type";
import { getTwColorClasses } from "./twColor";

export const twClasses: TwClassGroup[] = [
	{
		id: "aspectRatio",
		label: "Aspect Ratio",
		types: ["enum", "arbitrary", "ratio", "custom-property", "number"],
		members: [
			{
				prefix: "aspect",
				classPrefix: "aspect",
				values: {
					square: "aspect-square",
					video: "aspect-video",
					auto: "aspect-auto",
				},
				var: "--builder-aspect",
				group: "layout",
			},
		],
	},
	{
		id: "columns",
		label: "Columns",
		types: ["enum", "number", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "columns",
				classPrefix: "columns",
				values: {
					xs: "columns-xs",
					sm: "columns-sm",
					md: "columns-md",
					lg: "columns-lg",
					xl: "columns-xl",
					auto: "columns-auto",
					"default-1": "columns-1",
					"default-2": "columns-2",
					"default-3": "columns-3",
					"default-4": "columns-4",
					"default-5": "columns-5",
					"default-6": "columns-6",
					"default-7": "columns-7",
					"default-8": "columns-8",
					"default-9": "columns-9",
					"default-10": "columns-10",
					"default-11": "columns-11",
					"default-12": "columns-12",
					"2xs": "columns-2xs",
					"3xs": "columns-3xs",
					"2xl": "columns-2xl",
					"3xl": "columns-3xl",
					"4xl": "columns-4xl",
					"5xl": "columns-5xl",
					"6xl": "columns-6xl",
					"7xl": "columns-7xl",
				},
				var: "--builder-columns",
				group: "layout",
			},
		],
	},
	{
		id: "breakAfter",
		label: "Break After",
		types: ["enum"],
		members: [
			{
				prefix: "break-after",
				classPrefix: "break-after",
				values: {
					auto: "break-after-auto",
					all: "break-after-all",
					avoid: "break-after-avoid",
					avoidPage: "break-after-avoid-page",
					page: "break-after-page",
					left: "break-after-left",
					right: "break-after-right",
					column: "break-after-column",
				},
				var: "--builder-break-after",
				group: "layout",
			},
		],
	},
	{
		id: "breakBefore",
		label: "Break Before",
		types: ["enum"],
		members: [
			{
				prefix: "break-before",
				classPrefix: "break-before",
				values: {
					auto: "break-before-auto",
					all: "break-before-all",
					avoid: "break-before-avoid",
					avoidPage: "break-before-avoid-page",
					page: "break-before-page",
					left: "break-before-left",
					right: "break-before-right",
					column: "break-before-column",
				},
				var: "--builder-break-before",
				group: "layout",
			},
		],
	},
	{
		id: "breakInside",
		label: "Break Inside",
		types: ["enum"],
		members: [
			{
				prefix: "break-inside",
				classPrefix: "break-inside",
				values: {
					auto: "break-inside-auto",
					avoid: "break-inside-avoid",
					avoidPage: "break-inside-avoid-page",
					column: "break-inside-column",
				},
				var: "--builder-break-inside",
				group: "layout",
			},
		],
	},
	{
		id: "boxDecoration",
		label: "Box Decoration",
		types: ["enum"],
		members: [
			{
				prefix: "box-decoration",
				classPrefix: "box-decoration",
				values: { clone: "box-decoration-clone", slice: "box-decoration-slice" },
				var: "--builder-box-decoration",
				group: "layout",
			},
		],
	},
	{
		id: "boxSizing",
		label: "Box Sizing",
		types: ["enum"],
		members: [
			{
				prefix: "box",
				classPrefix: "box",
				values: { borderBox: "box-border", contentBox: "box-content" },
				types: [],
				var: "--builder-box",
				group: "layout",
			},
		],
	},
	{
		id: "float",
		label: "Float",
		types: ["enum"],
		members: [
			{
				prefix: "float",
				classPrefix: "float",
				values: { right: "float-right", left: "float-left", end: "float-end", start: "float-start", none: "float-none" },
				var: "--builder-float",
				group: "layout",
			},
		],
	},
	{
		id: "display",
		label: "Display",
		types: ["enum"],
		members: [
			{
				prefix: "",
				classPrefix: "",
				values: {
					flex: "flex",
					block: "block",
					grid: "grid",
					inlineFlex: "inline-flex",
					inlineBlock: "inline-block",
					inlineGrid: "inline-grid",
					inlineTable: "inline-table",
					flowRoot: "flow-root",
					contents: "contents",
					table: "table",
					tableCaption: "table-caption",
					tableCell: "table-cell",
					tableColumn: "table-column",
					tableColumnGroup: "table-column-group",
					tableHeaderGroup: "table-header-group",
					tableFooterGroup: "table-footer-group",
					tableRow: "table-row",
					tableRowGroup: "table-row-group",
					listItem: "list-item",
					hidden: "hidden",
					srOnly: "sr-only",
					notSrOnly: "not-sr-only",
				},
				var: "--builder-display",
				group: "layout",
			},
		],
	},
	{
		id: "clear",
		label: "Clear",
		types: ["enum"],
		members: [
			{
				prefix: "clear",
				classPrefix: "clear",
				values: {
					right: "clear-right",
					left: "clear-left",
					end: "clear-end",
					start: "clear-start",
					both: "clear-both",
					none: "clear-none",
				},
				var: "--builder-clear",
				group: "layout",
			},
		],
	},
	{
		id: "isolate",
		label: "Isolate",
		types: ["enum"],
		members: [
			{
				prefix: "",
				classPrefix: "",
				values: { isolate: "isolate", auto: "isolation-auto" },
				var: "--builder-isolate",
				group: "layout",
			},
		],
	},
	{
		id: "objectFit",
		label: "Object Fit",
		members: [
			{
				prefix: "object",
				classPrefix: "object",
				types: ["enum"],
				values: {
					contain: "object-contain",
					cover: "object-cover",
					fill: "object-fill",
					none: "object-none",
					scaleDown: "object-scale-down",
				},
				var: "--builder-object",
				group: "layout",
			},
		],
	},
	{
		id: "objectPosition",
		label: "Object Position",
		members: [
			{
				prefix: "object",
				classPrefix: "object",
				types: ["enum"],
				values: {
					topLeft: "object-top-left",
					topRight: "object-top-right",
					top: "object-top",
					left: "object-left",
					center: "object-center",
					right: "object-right",
					bottomLeft: "object-bottom-left",
					bottomRight: "object-bottom-right",
					bottom: "object-bottom",
				},
				var: "--builder-object-position",
				group: "layout",
			},
		],
	},
	{
		id: "overflow",
		label: "Overflow",
		types: ["enum"],
		members: [
			{
				label: "Overflow",
				prefix: "overflow",
				classPrefix: "overflow",
				values: {
					auto: "overflow-auto",
					hidden: "overflow-hidden",
					visible: "overflow-visible",
					clip: "overflow-clip",
					scroll: "overflow-scroll",
				},
				var: "--builder-overflow",
				group: "layout",
			},
			{
				label: "Overflow X",
				prefix: "overflow-x",
				classPrefix: "overflow-x",
				values: {
					auto: "overflow-x-auto",
					hidden: "overflow-x-hidden",
					visible: "overflow-x-visible",
					clip: "overflow-x-clip",
					scroll: "overflow-x-scroll",
				},
				var: "--builder-overflow-x",
				group: "layout",
			},
			{
				label: "Overflow Y",
				prefix: "overflow-y",
				classPrefix: "overflow-y",
				values: {
					auto: "overflow-y-auto",
					hidden: "overflow-y-hidden",
					visible: "overflow-y-visible",
					clip: "overflow-y-clip",
					scroll: "overflow-y-scroll",
				},
				var: "--builder-overflow-y",
				group: "layout",
			},
		],
	},
	{
		id: "overscroll",
		label: "Overscroll",
		types: ["enum"],
		members: [
			{
				prefix: "overscroll",
				classPrefix: "overscroll",
				values: { auto: "overscroll-auto", contain: "overscroll-contain", none: "overscroll-none" },
				var: "--builder-overscroll",
				group: "layout",
			},
			{
				prefix: "overscroll-x",
				classPrefix: "overscroll-x",
				values: { auto: "overscroll-x-auto", contain: "overscroll-x-contain", none: "overscroll-x-none" },
				var: "--builder-overscroll-x",
				group: "layout",
			},
			{
				label: "Overscroll Y",
				prefix: "overscroll-y",
				classPrefix: "overscroll-y",
				values: { auto: "overscroll-y-auto", contain: "overscroll-y-contain", none: "overscroll-y-none" },
				var: "--builder-overscroll-y",
				group: "layout",
			},
		],
	},
	{
		id: "position",
		label: "Position",
		types: ["enum"],
		members: [
			{
				prefix: "position",
				classPrefix: "position",
				values: { sticky: "sticky", relative: "relative", static: "static", fixed: "fixed", absolute: "absolute" },
				var: "--builder-position",
				group: "layout",
			},
		],
	},
	{
		id: "inset",
		label: "Positioning (Inset)",
		types: ["number", "negative", "enum", "fraction", "custom-property"],
		members: [
			{
				label: "Inset (All)",
				prefix: "inset",
				classPrefix: "inset",
				var: "--builder-inset",
				values: { px: "inset-px", "-px": "-inset-px", full: "inset-full", "-full": "-inset-full", auto: "inset-auto" }, // misalnya: full, px, -px, auto, dll
				group: "layout",
			},
			{
				label: "Inset X",
				prefix: "inset-x",
				classPrefix: "inset-x",
				var: "--builder-inset-x",
				values: {
					px: "inset-x-px",
					"-px": "-inset-x-px",
					full: "inset-x-full",
					"-full": "-inset-x-full",
					auto: "inset-x-auto",
				},
				group: "layout",
			},
			{
				label: "Inset Y",
				prefix: "inset-y",
				classPrefix: "inset-y",
				var: "--builder-inset-y",
				values: {
					px: "inset-y-px",
					"-px": "-inset-y-px",
					full: "inset-y-full",
					"-full": "-inset-y-full",
					auto: "inset-y-auto",
				},
				group: "layout",
			},
			{
				label: "Start",
				prefix: "start",
				classPrefix: "start",
				var: "--builder-start",
				values: {
					px: "start-px",
					"-px": "-start-px",
					full: "start-full",
					"-full": "-start-full",
					auto: "start-auto",
				},
				group: "layout",
			},
			{
				label: "End",
				prefix: "end",
				classPrefix: "end",
				var: "--builder-end",
				values: {
					px: "end-px",
					"-px": "-end-px",
					full: "end-full",
					"-full": "-end-full",
					auto: "end-auto",
				},
				group: "layout",
			},
			{
				label: "Top",
				prefix: "top",
				classPrefix: "top",
				var: "--builder-top",
				values: { px: "top-px", "-px": "-top-px", full: "top-full", "-full": "-top-full", auto: "top-auto" },
				group: "layout",
			},
			{
				label: "Right",
				prefix: "right",
				classPrefix: "right",
				var: "--builder-right",
				values: { px: "right-px", "-px": "-right-px", full: "right-full", "-full": "-right-full", auto: "right-auto" },
				group: "layout",
			},
			{
				label: "Bottom",
				prefix: "bottom",
				classPrefix: "bottom",
				var: "--builder-bottom",
				values: {
					px: "bottom-px",
					"-px": "-bottom-px",
					full: "bottom-full",
					"-full": "-bottom-full",
					auto: "bottom-auto",
				},
				group: "layout",
			},
			{
				label: "Left",
				prefix: "left",
				classPrefix: "left",
				var: "--builder-left",
				values: { px: "left-px", "-px": "-left-px", full: "left-full", "-full": "-left-full", auto: "left-auto" },
				group: "layout",
			},
		],
	},
	{
		id: "visibility",
		label: "Visibility",
		types: ["enum"],
		members: [
			{
				prefix: "",
				classPrefix: "",
				values: { visible: "visible", invisible: "invisible", collapse: "collapse" },
				var: "--builder-visibility",
				group: "layout",
			},
		],
	},
	{
		id: "zIndex",
		label: "Z-Index",
		types: ["enum", "arbitrary", "number", "negative", "custom-property"],
		members: [
			{
				prefix: "z",
				classPrefix: "z",
				values: {
					auto: "z-auto",
					"0": "z-0",
					"10": "z-10",
					"20": "z-20",
					"30": "z-30",
					"40": "z-40",
					"50": "z-50",
					/* minus */
					"-0": "-z-0",
					"-10": "-z-10",
					"-20": "-z-20",
					"-30": "-z-30",
					"-40": "-z-40",
					"-50": "-z-50",
				},
				var: "--builder-z-index",
				group: "layout",
			},
		],
	},
	{
		id: "flexBasis",
		label: "Flex Basis",
		types: ["number", "fraction", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "basis",
				classPrefix: "basis",
				values: {
					full: "basis-full",
					auto: "basis-auto",
					xs: "basis-xs",
					sm: "basis-sm",
					md: "basis-md",
					lg: "basis-lg",
					xl: "basis-xl",
					"2xs": "basis-2xs",
					"3xs": "basis-3xs",
					"2xl": "basis-2xl",
					"3xl": "basis-3xl",
					"4xl": "basis-4xl",
					"5xl": "basis-5xl",
					"6xl": "basis-6xl",
					"7xl": "basis-7xl",
					"0": "basis-0",
					"0.5": "basis-0.5",
					"1": "basis-1",
					"1.5": "basis-1.5",
					"2": "basis-2",
					"2.5": "basis-2.5",
					"3": "basis-3",
					"3.5": "basis-3.5",
					"4": "basis-4",
					"5": "basis-5",
					"6": "basis-6",
					"7": "basis-7",
					"8": "basis-8",
					"9": "basis-9",
					"10": "basis-10",
					"11": "basis-11",
					"12": "basis-12",
					"14": "basis-14",
					"16": "basis-16",
					"20": "basis-20",
					"24": "basis-24",
					"28": "basis-28",
					"32": "basis-32",
					"36": "basis-36",
					"40": "basis-40",
					"44": "basis-44",
					"48": "basis-48",
					"52": "basis-52",
					"56": "basis-56",
					"60": "basis-60",
					"64": "basis-64",
					"72": "basis-72",
					"80": "basis-80",
					"96": "basis-96",
					/* 1/ */
					"1/2": "basis-1/12",
					"1/3": "basis-1/3",
					"1/4": "basis-1/4",
					"1/5": "basis-1/5",
					"1/6": "basis-1/6",
					"1/12": "basis-1/12",
					/* 2/ */
					"2/3": "basis-2/3",
					"2/4": "basis-2/4",
					"2/5": "basis-2/5",
					"2/6": "basis-2/6",
					"2/12": "basis-2/12",
					/* 3/ */
					"3/4": "basis-3/4",
					"3/5": "basis-3/5",
					"3/6": "basis-3/6",
					"3/12": "basis-3/12",
					/* 4/ */
					"4/5": "basis-4/5",
					"4/6": "basis-4/6",
					"4/12": "basis-4/12",
					/* 5/ */
					"5/6": "basis-4/6",
					"5/12": "basis-4/12",
					/* 6/ */
					"6/12": "basis-6/12",
					/* 7/ */
					"7/12": "basis-7/12",
					/* 8/ */
					"8/12": "basis-8/12",
					/* 9/ */
					"9/12": "basis-9/12",
					/* 10/ */
					"10/12": "basis-10/12",
					/* 11/ */
					"11/12": "basis-6/12",
				},
				var: "--builder-basis",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "flexDirection",
		label: "Flex Direction",
		types: ["enum"],
		members: [
			{
				prefix: "flex",
				classPrefix: "flex",
				values: {
					row: "flex-row",
					column: "flex-col",
					rowReverse: "flex-row-reverse",
					columnReverse: "flex-col-reverse",
				},
				var: "--builder-flex-direction",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "flexWrap",
		label: "Flex Wrap",
		types: ["enum"],
		members: [
			{
				prefix: "flex",
				classPrefix: "flex",
				values: { noWrap: "flex-nowrap", wrap: "flex-wrap", wrapReverse: "flex-wrap-reverse" },
				var: "--builder-flex-wrap",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "flex",
		label: "Flex",
		types: ["enum", "number", "fraction", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "flex",
				classPrefix: "flex",
				values: {
					auto: "flex-auto",
					initial: "flex-initial",
					none: "flex-none",
					/* 1 */
					"1/2": "flex-1/2",
					"1/3": "flex-1/3",
					"1/4": "flex-1/4",
					"1/5": "flex-1/5",
					"1/6": "flex-1/6",
					"1/12": "flex-1/12",
					/* 2 */
					"2/2": "flex-2/2",
					"2/3": "flex-2/3",
					"2/4": "flex-2/4",
					"2/5": "flex-2/5",
					"2/6": "flex-2/6",
					"2/12": "flex-2/12",
					/* 3 */
					"3/4": "flex-3/4",
					"3/5": "flex-3/5",
					"3/6": "flex-3/6",
					"3/12": "flex-3/12",
					/* 4 */
					"4/5": "flex-4/5",
					"4/6": "flex-4/6",
					"4/12": "flex-4/12",
					/* 5 */
					"5/6": "flex-5/6",
					"5/12": "flex-5/12",
					/* 6 */
					"6/12": "flex-6/12",
					/* 7 */
					"7/12": "flex-7/12",
					/* 8 */
					"8/12": "flex-8/12",
					/* 9 */
					"9/12": "flex-9/12",
					/* 10 */
					"10/12": "flex-10/12",
					/* 11 */
					"11/12": "flex-11/12",
				},
				var: "--builder-flex",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "flexGrow",
		label: "Flex Grow",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "grow",
				classPrefix: "grow",
				values: { "0": "grow-0", grow: "grow" },
				var: "--builder-grow",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "flexShrink",
		label: "Flex Shrink",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "shrink",
				classPrefix: "shrink",
				values: { "0": "shrink-0", shrink: "shrink" },
				var: "--builder-shrink",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "order",
		label: "order",
		types: ["enum", "number", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "order",
				classPrefix: "order",
				values: {
					first: "order-first",
					last: "order-last",
					none: "order-none",
					"1": "order-1",
					"2": "order-2",
					"3": "order-3",
					"4": "order-4",
					"5": "order-5",
					"6": "order-6",
					"7": "order-7",
					"8": "order-8",
					"9": "order-9",
					"10": "order-10",
					"11": "order-11",
					"12": "order-12",
					/* minus */
					"-1": "-order-1",
					"-2": "-order-2",
					"-3": "-order-3",
					"-4": "-order-4",
					"-5": "-order-5",
					"-6": "-order-6",
					"-7": "-order-7",
					"-8": "-order-8",
					"-9": "-order-9",
					"-10": "-order-10",
					"-11": "-order-11",
					"-12": "-order-12",
				},
				var: "--builder-order",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gridTemplateColumns",
		label: "Grid Template Columns",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "grid-cols",
				classPrefix: "grid-cols",
				values: {
					none: "grid-cols-none",
					subgrid: "grid-cols-subgrid",
					"1": "grid-cols-1",
					"2": "grid-cols-2",
					"3": "grid-cols-3",
					"4": "grid-cols-4",
					"5": "grid-cols-5",
					"6": "grid-cols-6",
					"7": "grid-cols-7",
					"8": "grid-cols-8",
					"9": "grid-cols-9",
					"10": "grid-cols-10",
					"11": "grid-cols-11",
					"12": "grid-cols-12",
				},
				var: "--builder-grid-cols",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gridColumn",
		label: "Grid Column",
		types: ["enum", "number", "custom-property", "arbitrary"],
		members: [
			{
				label: "Column",
				prefix: "col",
				classPrefix: "col",
				values: {
					auto: "col-auto",
					/* span */
					spanFull: "col-span-full",
					span1: "col-span-1",
					span2: "col-span-2",
					span3: "col-span-3",
					span4: "col-span-4",
					span5: "col-span-5",
					span6: "col-span-6",
					span7: "col-span-7",
					span8: "col-span-8",
					span9: "col-span-9",
					span10: "col-span-10",
					span11: "col-span-11",
					span12: "col-span-12",
				},
				var: "--builder-grid-column-span",
				group: "flexAndGrid",
			},
			{
				label: "Column Start",
				prefix: "col-start",
				classPrefix: "col-start",
				values: {
					startAuto: "col-start-auto",
					start1: "col-start-1",
					start2: "col-start-2",
					start3: "col-start-3",
					start4: "col-start-4",
					start5: "col-start-5",
					start6: "col-start-6",
					start7: "col-start-7",
					start8: "col-start-8",
					start9: "col-start-9",
					start10: "col-start-10",
					start11: "col-start-11",
					start12: "col-start-12",
				},
				var: "--builder-grid-column-start",
				group: "flexAndGrid",
			},
			{
				label: "Column End",
				prefix: "col-end",
				classPrefix: "col-end",
				values: {
					endAuto: "col-end-auto",
					end1: "col-end-1",
					end2: "col-end-2",
					end3: "col-end-3",
					end4: "col-end-4",
					end5: "col-end-5",
					end6: "col-end-6",
					end7: "col-end-7",
					end8: "col-end-8",
					end9: "col-end-9",
					end10: "col-end-10",
					end11: "col-end-11",
					end12: "col-end-12",
				},
				var: "--builder-grid-column-end",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gridTemplateRows",
		label: "Grid Template Rows",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "grid-rows",
				classPrefix: "grid-rows",
				values: {
					none: "grid-rows-none",
					subgrid: "grid-rows-subgrid",
					"1": "grid-rows-1",
					"2": "grid-rows-2",
					"3": "grid-rows-3",
					"4": "grid-rows-4",
					"5": "grid-rows-5",
					"6": "grid-rows-6",
					"7": "grid-rows-7",
					"8": "grid-rows-8",
					"9": "grid-rows-9",
					"10": "grid-rows-10",
					"11": "grid-rows-11",
					"12": "grid-rows-12",
				},
				var: "--builder-grid-rows",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gridRow",
		label: "Grid Row",
		types: ["enum", "number", "custom-property", "arbitrary"],
		members: [
			{
				label: "Row",
				prefix: "grid-row",
				classPrefix: "grid-row",
				values: {
					auto: "row-auto",
					spanFull: "row-span-full",
					span1: "row-span-1",
					span2: "row-span-2",
					span3: "row-span-3",
					span4: "row-span-4",
					span5: "row-span-5",
					span6: "row-span-6",
					span7: "row-span-7",
					span8: "row-span-8",
					span9: "row-span-9",
					span10: "row-span-10",
					span11: "row-span-11",
					span12: "row-span-12",
				},
				var: "--builder-grid-row",
				group: "flexAndGrid",
			},
			{
				label: "Row Start",
				prefix: "row-start",
				classPrefix: "row-start",
				values: {
					startAuto: "row-start-auto",
					start1: "row-start-1",
					start2: "row-start-2",
					start3: "row-start-3",
					start4: "row-start-4",
					start5: "row-start-5",
					start6: "row-start-6",
					start7: "row-start-7",
					start8: "row-start-8",
					start9: "row-start-9",
					start10: "row-start-10",
					start11: "row-start-11",
					start12: "row-start-12",
				},
				var: "--builder-grid-row-start",
				group: "flexAndGrid",
			},
			{
				label: "Row End",
				prefix: "row-end",
				classPrefix: "row-end",
				values: {
					endAuto: "row-end-auto",
					end1: "row-end-1",
					end2: "row-end-2",
					end3: "row-end-3",
					end4: "row-end-4",
					end5: "row-end-5",
					end6: "row-end-6",
					end7: "row-end-7",
					end8: "row-end-8",
					end9: "row-end-9",
					end10: "row-end-10",
					end11: "row-end-11",
					end12: "row-end-12",
				},
				var: "--builder-grid-row-end",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gridAutoFlow",
		label: "Grid Auto Flow",
		types: ["enum"],
		members: [
			{
				prefix: "grid-flow",
				classPrefix: "grid-flow",
				values: {
					row: "grid-flow-row",
					col: "grid-flow-col",
					dense: "grid-flow-dense",
					rowDense: "grid-flow-row-dense",
					colDense: "grid-flow-col-dense",
				},
				var: "--builder-grid-flow",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gridAutoColumns",
		label: "Grid Auto Columns",
		types: ["enum"],
		members: [
			{
				prefix: "auto-cols",
				classPrefix: "auto-cols",
				values: {
					auto: "auto-cols-auto",
					min: "auto-cols-min",
					max: "auto-cols-max",
					fr: "auto-cols-fr",
				},
				var: "--builder-auto-cols",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gridAutoRows",
		label: "Grid Auto Rows",
		types: ["enum"],
		members: [
			{
				prefix: "auto-rows",
				classPrefix: "auto-rows",
				values: {
					auto: "auto-rows-auto",
					min: "auto-rows-min",
					max: "auto-rows-max",
					fr: "auto-rows-fr",
				},
				var: "--builder-auto-rows",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "gap",
		label: "Gap",
		types: ["custom-property", "arbitrary", "number"], // atau `number` kalau lo convert ke spacing scale
		members: [
			{
				label: "Gap",
				prefix: "gap",
				classPrefix: "gap",
				var: "--builder-gap",
				group: "spacing",
			},
			{
				label: "Gap X",
				prefix: "gap-x",
				classPrefix: "gap-x",
				var: "--builder-gap-x",
				group: "spacing",
			},
			{ label: "Gap Y", prefix: "gap-y", classPrefix: "gap-y", var: "--builder-gap-y", group: "spacing" },
		],
	},
	{
		id: "jusitify",
		label: "Justify",
		types: ["enum"],
		members: [
			{
				label: "Justify Content",
				prefix: "justify",
				classPrefix: "justify",
				values: {
					start: "justify-start",
					end: "justify-end",
					endSafe: "justify-end-safe",
					center: "justify-center",
					centerSafe: "justify-center-safe",
					between: "justify-between",
					around: "justify-around",
					evenly: "justify-evenly",
					stretch: "justify-stretch",
					baseline: "justify-baseline",
					normal: "justify-normal",
				},
				var: "--builder-justify-content",
				group: "flexAndGrid",
			},
			{
				label: "Justify Items",
				prefix: "justify-items",
				classPrefix: "justify-items",
				values: {
					start: "justify-items-start",
					end: "justify-items-end",
					endSafe: "justify-items-end-safe",
					center: "justify-items-center",
					centerSafe: "justify-items-center-safe",
					stretch: "justify-items-stretch",
					normal: "justify-items-normal",
				},
				var: "--builder-justify-items",
				group: "flexAndGrid",
			},
			{
				label: "Justify Self",
				prefix: "justify-self",
				classPrefix: "justify-self",
				values: {
					start: "justify-self-start",
					center: "justify-self-center",
					centerSafe: "justify-self-center-safe",
					end: "justify-self-end",
					endSafe: "justify-self-end-safe",
					stretch: "justify-self-stretch",
				},
				var: "--builder-justify-self",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "alignment",
		label: "Alignment",
		types: ["enum"],
		members: [
			{
				label: "Align Content",
				prefix: "content",
				classPrefix: "content",
				values: {
					normal: "content-normal",
					center: "content-center",
					start: "content-start",
					end: "content-end",
					between: "content-between",
					around: "content-around",
					evenly: "content-evenly",
					baseline: "content-baseline",
					stretch: "content-stretch",
				},
				var: "--builder-align-content",
				group: "flexAndGrid",
			},
			{
				label: "Align Items",
				prefix: "items",
				classPrefix: "items",
				values: {
					start: "items-start",
					end: "items-end",
					endSafe: "items-end-safe",
					center: "items-center",
					centerSafe: "items-center-safe",
					stretch: "items-stretch",
				},
				var: "--builder-align-items",
				group: "flexAndGrid",
			},
			{
				label: "Align Self",
				prefix: "self",
				classPrefix: "self",
				values: {
					start: "self-start",
					end: "self-end",
					endSafe: "self-end-safe",
					center: "self-center",
					centerSafe: "self-center-safe",
					stretch: "self-stretch",
					baseline: "self-baseline",
					baselineLast: "self-baseline-last",
				},
				var: "--builder-align-self",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "placement",
		label: "Placement",
		types: ["enum"],
		members: [
			{
				label: "Place Content",
				prefix: "place-content",
				classPrefix: "place-content",
				values: {
					center: "place-content-center",
					centerSafe: "place-content-center-safe",
					start: "place-content-start",
					end: "place-content-end",
					endSafe: "place-content-end-safe",
					between: "place-content-between",
					around: "place-content-around",
					evenly: "place-content-evenly",
					baseline: "place-content-baseline",
					stretch: "place-content-stretch",
				},
				var: "--builder-place-content",
				group: "flexAndGrid",
			},
			{
				label: "Place Items",
				prefix: "place-items",
				classPrefix: "place-items",
				values: {
					center: "place-items-center",
					centerSafe: "place-items-center-safe",
					start: "place-items-start",
					end: "place-items-end",
					endSafe: "place-items-end-safe",
					baseline: "place-items-baseline",
					stretch: "place-items-stretch",
				},
				var: "--builder-place-items",
				group: "flexAndGrid",
			},
			{
				label: "Place Self",
				prefix: "place-self",
				classPrefix: "place-self",
				values: {
					auto: "place-self-auto",
					start: "place-self-start",
					end: "place-self-end",
					endSafe: "place-self-end-safe",
					center: "place-self-center",
					centerSafe: "place-self-center-safe",
					stretch: "place-self-stretch",
				},
				var: "--builder-place-self",
				group: "flexAndGrid",
			},
		],
	},
	{
		id: "padding",
		label: "Padding",
		types: ["number", "arbitrary", "custom-property"],
		members: [
			{ label: "Padding (All)", prefix: "p", classPrefix: "p", var: "--builder-padding", group: "spacing" },
			{ label: "Padding X", prefix: "px", classPrefix: "px", var: "--builder-padding-x", group: "spacing" },
			{ label: "Padding Y", prefix: "py", classPrefix: "py", var: "--builder-padding-y", group: "spacing" },
			{ label: "Padding Start", prefix: "ps", classPrefix: "ps", var: "--builder-padding-start", group: "spacing" },
			{ label: "Padding End", prefix: "pe", classPrefix: "pe", var: "--builder-padding-end", group: "spacing" },
			{ label: "Padding Top", prefix: "pt", classPrefix: "pt", var: "--builder-padding-top", group: "spacing" },
			{ label: "Padding Right", prefix: "pr", classPrefix: "pr", var: "--builder-padding-right", group: "spacing" },
			{ label: "Padding Bottom", prefix: "pb", classPrefix: "pb", var: "--builder-padding-bottom", group: "spacing" },
			{ label: "Padding Left", prefix: "pl", classPrefix: "pl", var: "--builder-padding-left", group: "spacing" },
		],
	},
	{
		id: "margin",
		label: "Margin",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				label: "Margin (All)",
				prefix: "m",
				classPrefix: "m",
				values: { auto: "m-auto" },
				var: "--builder-margin",
				group: "spacing",
			},
			{
				label: "Margin X",
				prefix: "mx",
				classPrefix: "mx",
				values: { auto: "mx-auto" },
				var: "--builder-margin-x",
				group: "spacing",
			},
			{
				label: "Margin Y",
				prefix: "my",
				classPrefix: "my",
				values: { auto: "my-auto" },
				var: "--builder-margin-y",
				group: "spacing",
			},
			{
				label: "Margin Start",
				prefix: "ms",
				classPrefix: "ms",
				values: { auto: "ms-auto" },
				var: "--builder-margin-start",
				group: "spacing",
			},
			{
				label: "Margin End",
				prefix: "me",
				classPrefix: "me",
				values: { auto: "me-auto" },
				var: "--builder-margin-end",
				group: "spacing",
			},
			{
				label: "Margin Top",
				prefix: "mt",
				classPrefix: "mt",
				values: { auto: "mt-auto" },
				var: "--builder-margin-top",
				group: "spacing",
			},
			{
				label: "Margin Right",
				prefix: "mr",
				classPrefix: "mr",
				values: { auto: "mr-auto" },
				var: "--builder-margin-right",
				group: "spacing",
			},
			{
				label: "Margin Bottom",
				prefix: "mb",
				classPrefix: "mb",
				values: { auto: "mb-auto" },
				var: "--builder-margin-bottom",
				group: "spacing",
			},
			{
				label: "Margin Left",
				prefix: "ml",
				classPrefix: "ml",
				values: { auto: "ml-auto" },
				var: "--builder-margin-left",
				group: "spacing",
			},
		],
	},
	{
		id: "space",
		label: "Space",
		types: ["number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "space-x",
				classPrefix: "space-x",
				var: "--builder-space-x",
				group: "spacing",
			},
			{
				prefix: "space-y",
				classPrefix: "space-y",
				var: "--builder-space-y",
				group: "spacing",
			},
			{
				prefix: "space-x-reverse",
				classPrefix: "space-x-reverse",
				var: "--builder-space-x-reverse",
				group: "spacing",
			},
			{
				prefix: "space-y-reverse",
				classPrefix: "space-y-reverse",
				var: "--builder-space-y-reverse",
				group: "spacing",
			},
		],
	},
	{
		id: "size",
		label: "Size",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "size",
				classPrefix: "size",
				values: {
					auto: "size-auto",
					full: "size-full",
					fit: "size-fit",
					dvw: "size-dvw",
					dvh: "size-dvh",
					lvw: "size-lvw",
					lvh: "size-lvh",
					svw: "size-lvw",
					svh: "size-svh",
					min: "size-min",
					max: "size-max",
				},
				var: "--builder-size",
				group: "sizing",
			},
		],
	},
	{
		id: "width",
		label: "Width",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "w",
				classPrefix: "w",
				values: {
					px: "w-px",
					full: "w-full",
					auto: "w-auto",
					screen: "w-screen",
					dvw: "w-dvw",
					dvh: "w-dvh",
					svh: "w-svh",
					lvw: "w-lvw",
					lvh: "w-lvh",
					min: "w-min",
					max: "w-max",
					fit: "w-fit",
					xs: "w-xs",
					"2xs": "w-2xs",
					"3xs": "w-3xs",
					sm: "w-sm",
					md: "w-md",
					lg: "w-lg",
					xl: "w-xl",
					"2xl": "w-2xl",
					"3xl": "w-3xl",
					"4xl": "w-4xl",
					"5xl": "w-5xl",
					"6xl": "w-6xl",
					"7xl": "w-7xl",
				},
				var: "--builder-width",
				group: "sizing",
			},
		],
	},
	{
		id: "minWidth",
		label: "Min Width",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "min-w",
				classPrefix: "min-w",
				values: {
					auto: "min-w-auto",
					fit: "min-w-fit",
					full: "min-w-full",
					screen: "min-w-screen",
					px: "min-w-px",
					dvw: "min-w-dvw",
					dvh: "min-w-dvh",
					svh: "min-w-svh",
					svw: "min-w-svw",
					lvw: "min-w-lvw",
					lvh: "min-w-lvh",
					/* breakpoint */
					xs: "min-w-xs",
					"2xs": "min-w-2xs",
					"3xs": "min-w-3xs",
					sm: "min-w-sm",
					md: "min-w-md",
					lg: "min-w-lg",
					xl: "min-w-xl",
					"2xl": "min-w-2xl",
					"3xl": "min-w-3xl",
					"4xl": "min-w-4xl",
					"5xl": "min-w-5xl",
					"6xl": "min-w-6xl",
					"7xl": "min-w-7xl",
				},
				var: "--builder-min-width",
				group: "sizing",
			},
		],
	},
	{
		id: "maxWidth",
		label: "Max Width",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "max-w",
				classPrefix: "max-w",
				values: {
					auto: "max-w-auto",
					fit: "max-w-fit",
					full: "max-w-full",
					screen: "max-w-screen",
					px: "max-w-px",
					dvw: "max-w-dvw",
					dvh: "max-w-dvh",
					svh: "max-w-svh",
					svw: "max-w-svw",
					lvw: "max-w-lvw",
					lvh: "max-w-lvh",
					/* breakpoint */
					xs: "max-w-xs",
					"2xs": "max-w-2xs",
					"3xs": "max-w-3xs",
					sm: "max-w-sm",
					md: "max-w-md",
					lg: "max-w-lg",
					xl: "max-w-xl",
					"2xl": "max-w-2xl",
					"3xl": "max-w-3xl",
					"4xl": "max-w-4xl",
					"5xl": "max-w-5xl",
					"6xl": "max-w-6xl",
					"7xl": "max-w-7xl",
				},
				var: "--builder-max-width",
				group: "sizing",
			},
		],
	},
	{
		id: "height",
		label: "Height",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "h",
				classPrefix: "h",
				values: {
					auto: "h-auto",
					px: "h-px",
					full: "h-full",
					screen: "h-screen",
					dvh: "h-dvh",
					dvw: "h-dvw",
					svh: "h-svh",
					svw: "h-svw",
					lvw: "h-lvw",
					lvh: "h-lvh",
					lh: "h-lh",
					fit: "h-fit",
					max: "h-max",
					min: "h-min",
				},
				var: "--builder-height",
				group: "sizing",
			},
		],
	},
	{
		id: "minHeight",
		label: "Min Height",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "min-h",
				classPrefix: "min-h",
				values: {
					auto: "min-h-auto",
					px: "min-h-px",
					full: "min-h-full",
					screen: "min-h-screen",
					dvh: "min-h-dvh",
					dvw: "min-h-dvw",
					svh: "min-h-svh",
					svw: "min-h-svw",
					lvw: "min-h-lvw",
					lvh: "min-h-lvh",
					lh: "min-h-lh",
					fit: "min-h-fit",
					max: "min-h-max",
					min: "min-h-min",
				},
				var: "--builder-min-height",
				group: "sizing",
			},
		],
	},
	{
		id: "maxHeight",
		label: "Max Height",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "max-h",
				classPrefix: "max-h",
				values: {
					auto: "max-h-auto",
					px: "max-h-px",
					full: "max-h-full",
					screen: "max-h-screen",
					dvh: "max-h-dvh",
					dvw: "max-h-dvw",
					svh: "max-h-svh",
					svw: "max-h-svw",
					lvw: "max-h-lvw",
					lvh: "max-h-lvh",
					lh: "max-h-lh",
					fit: "max-h-fit",
					max: "max-h-max",
					min: "max-h-min",
				},
				var: "--builder-max-height",
				group: "sizing",
			},
		],
	},
	{
		id: "font",
		label: "Font",
		members: [
			{
				label: "Font Family",
				prefix: "font",
				classPrefix: "font",
				types: ["enum"],
				values: {
					sans: "font-sans",
					serif: "font-serif",
					dmSans: "font-dm-sans",
					plusJakartaSans: "font-plus-jakarta-sans",
					bebasNeue: "font-bebas-neue",
					mono: "font-mono",
					openSans: "font-open-sans",
					poppins: "font-poppins",
					redHatDisplay: "font-redhat-display",
					publicSans: "font-public-sans",
					inter: "font-inter",
				},
				var: "--builder-font-family",
				group: "typography",
			},
			{
				label: "Font Weight",
				prefix: "font",
				classPrefix: "font",
				types: ["enum", "custom-property", "arbitrary", "number"],
				values: {
					thin: "font-thin",
					extraLight: "font-extralight",
					light: "font-light",
					normal: "font-normal",
					medium: "font-medium",
					semibold: "font-semibold",
					bold: "font-bold",
					extrabold: "font-extrabold",
					black: "font-black",
				},
				var: "--builder-font-weight",
				group: "typography",
			},
			{
				label: "Font Smoothing",
				prefix: "",
				classPrefix: "",
				types: ["enum"],
				values: {
					antialiased: "antialiased",
					subPixelAntialiased: "subpixel-antialiased",
				},
				var: "--builder-font-smoothing",
				group: "typography",
			},
			{
				label: "Font Style",
				prefix: "",
				classPrefix: "",
				types: ["enum"],
				values: {
					italic: "italic",
					notItalic: "not-italic",
				},
				var: "--builder-font-style",
				group: "typography",
			},
			{
				label: "Font Stretch",
				prefix: "font-stretch",
				classPrefix: "font-stretch",
				types: ["enum"],
				values: {
					ultraCondensed: "font-stretch-ultra-condensed",
					extraCondensed: "font-stretch-extra-condensed",
					condensed: "font-stretch-condensed",
					semiCondensed: "font-stretch-semi-condensed",
					normal: "font-stretch-normal",
					semiExpanded: "font-stretch-semi-expanded",
					expanded: "font-stretch-expanded",
					extraExpanded: "font-stretch-extra-expanded",
					ultraExpanded: "font-stretch-ultra-expanded",
				},
				var: "--builder-font-stretch",
				group: "typography",
			},
			{
				label: "Font Variant Numeric",
				prefix: "",
				classPrefix: "",
				types: ["enum"],
				values: {
					normal: "normal-nums",
					ordinal: "ordinal",
					slashedZero: "slashed-zero",
					liningNums: "lining-nums",
					oldstyleNums: "oldstyle-nums",
					proportionalNums: "proportional-nums",
					tabularNums: "tabular-nums",
					diagonalFractions: "diagonal-fractions",
					stackedFractions: "stacked-fractions",
				},
				var: "--builder-font-variant-numeric",
				group: "typography",
			},
		],
	},
	{
		id: "letterSpacing",
		label: "Letter Spacing",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "tracking",
				classPrefix: "tracking",
				values: {
					tighter: "tracking-tighter",
					tight: "tracking-tight",
					normal: "tracking-normal",
					wide: "tracking-wide",
					wider: "tracking-wider",
					widest: "tracking-widest",
				},
				var: "--builder-letter-spacing",
				group: "typography",
			},
		],
	},
	{
		id: "lineClamp",
		label: "Line Clamp",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "line-clamp",
				classPrefix: "line-clamp",
				values: {
					none: "line-clamp-none",
				},
				var: "--builder-line-clamp",
				group: "typography",
			},
		],
	},
	{
		id: "lineHeight",
		label: "Line Height",
		types: ["enum"],
		members: [
			{
				prefix: "leading",
				classPrefix: "leading",
				values: {
					none: "leading-none",
					normal: "leading-normal",
				},
				var: "--builder-line-height",
				group: "typography",
			},
		],
	},
	{
		id: "listStyleImage",
		label: "List Style Image",
		types: ["enum", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "list-image",
				classPrefix: "list-image",
				values: {
					none: "list-image-none",
				},
				var: "--builder-list-style-image",
				group: "typography",
			},
		],
	},
	{
		id: "listStyle",
		label: "List Style",
		members: [
			{
				label: "List Style Position",
				prefix: "list",
				classPrefix: "list",
				types: ["enum"],
				values: {
					inside: "list-inside",
					outside: "list-outside",
				},
				var: "--builder-list-style-position",
				group: "typography",
			},
			{
				label: "List Style Type",
				prefix: "list",
				classPrefix: "list",
				types: ["enum"],
				values: {
					disc: "list-disc",
					decimal: "list-decimal",
					none: "list-none",
				},
				var: "--builder-list-style-type",
				group: "typography",
			},
		],
	},
	{
		id: "text",
		label: "Text",
		members: [
			{
				label: "Text Size",
				prefix: "text",
				classPrefix: "text",
				types: ["enum", "arbitrary", "number", "mixed"],
				values: {
					xs: "text-xs",
					sm: "text-sm",
					base: "text-base",
					lg: "text-lg",
					xl: "text-xl",
					"2xl": "text-2xl",
					"3xl": "text-3xl",
					"4xl": "text-4xl",
					"5xl": "text-5xl",
					"6xl": "text-6xl",
					"7xl": "text-7xl",
					"8xl": "text-8xl",
					"9xl": "text-9xl",
				},
				var: "--builder-text-size",
				group: "typography",
			},
			{
				label: "Text Color",
				prefix: "text",
				classPrefix: "text",
				types: ["enum", "color", "arbitrary", "custom-property"],
				values: {
					...getTwColorClasses("text"),
				},
				var: "--builder-text-color",
				group: "typography",
			},
			{
				label: "Text Alignement",
				types: ["enum"],
				prefix: "text",
				classPrefix: "text",
				values: {
					left: "text-left",
					center: "text-center",
					right: "text-right",
					justify: "text-justify",
					start: "text-start",
					end: "text-end",
				},
				var: "--builder-text-align",
				group: "typography",
			},
			{
				label: "Text Transform",
				types: ["enum"],
				prefix: "",
				classPrefix: "",
				values: {
					uppercase: "uppercase",
					lowercase: "lowercase",
					capitalize: "capitalize",
					normal: "normal-case",
				},
				var: "--builder-text-transform",
				group: "typography",
			},
			{
				label: "Text Overflow",
				types: ["enum"],
				prefix: "",
				classPrefix: "",
				values: {
					truncate: "truncate",
					ellipsis: "text-ellipsis",
					clip: "text-clip",
				},
				var: "--builder-text-overflow",
				group: "typography",
			},
			{
				label: "Text Underline Offset",
				types: ["enum", "number", "custom-property", "arbitrary", "negative"],
				prefix: "underline-offset",
				classPrefix: "underline-offset",
				values: {
					auto: "underline-offset-auto",
				},
				var: "--builder-text-underline-offset",
				group: "typography",
			},
			{
				label: "Text Wrap",
				types: ["enum"],
				prefix: "",
				classPrefix: "",
				values: { wrap: "text-wrap", nowrap: "text-nowrap", balance: "text-balance", pretty: "text-pretty" },
				var: "--builder-text-wrap",
				group: "typography",
			},
			{
				label: "Text Indent",
				types: ["enum", "number", "custom-property", "arbitrary", "negative"],
				prefix: "indent",
				classPrefix: "indent",
				values: {
					px: "indent-px",
				},
				var: "--builder-text-indent",
				group: "typography",
			},
			{
				label: "Text Display Content",
				types: ["enum", "custom-property", "number", "arbitrary"],
				prefix: "content",
				classPrefix: "content",
				values: {
					none: "content-none",
				},
				var: "--builder-text-content",
				group: "typography",
			},
		],
	},
	{
		id: "textDecoration",
		label: "Text Decoration",
		members: [
			{
				label: "Text Decoration Line",
				prefix: "",
				classPrefix: "",
				types: ["enum"],
				values: {
					underline: "underline",
					overline: "overline",
					lineThrough: "line-through",
					noUnderline: "no-underline",
				},
				var: "--builder-text-decoration-line",
				group: "typography",
			},
			{
				label: "Text Decoration Color",
				types: ["enum", "color", "arbitrary", "custom-property"],
				prefix: "decoration",
				classPrefix: "decoration",
				values: {
					...getTwColorClasses("decoration"),
				},
				var: "--builder-text-decoration-color",
				group: "typography",
			},
			{
				prefix: "decoration",
				classPrefix: "decoration",
				label: "Text Decoration Style",
				types: ["enum"],
				values: {
					solid: "decoration-solid",
					double: "decoration-double",
					dotted: "decoration-dotted",
					dashed: "decoration-dashed",
					wavy: "decoration-wavy",
				},
				var: "--builder-text-decoration-style",
				group: "typography",
			},
			{
				label: "Text Decoration Thickness",
				types: ["enum", "length", "arbitrary", "number"],
				prefix: "decoration",
				classPrefix: "decoration",
				values: {
					fromFront: "decoration-from-font",
					auto: "decoration-auto",
				},
				var: "--builder-text-decoration-thickness",
				group: "typography",
			},
		],
	},
	{
		id: "verticalAlign",
		label: "Vertical Align",
		types: ["enum", "number", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "align",
				classPrefix: "align",
				values: {
					baseline: "align-baseline",
					top: "align-top",
					middle: "align-middle",
					textTop: "align-text-top",
					textBottom: "align-text-bottom",
					sub: "align-sub",
					super: "align-super",
				},
				var: "--builder-vertical-align",
				group: "typography",
			},
		],
	},
	{
		id: "whitespace",
		label: "White Space",
		types: ["enum"],
		members: [
			{
				prefix: "whitespace",
				classPrefix: "whitespace",
				values: {
					normal: "whitespace-normal",
					nowrap: "whitespace-nowrap",
					pre: "whitespace-pre",
					preline: "whitespace-pre-line",
					prewrap: "whitespace-pre-wrap",
					breakspaces: "whitespace-break-spaces",
				},
				var: "--builder-whitespace",
				group: "typography",
			},
		],
	},
	{
		id: "wordbreak",
		label: "White Space",
		types: ["enum"],
		members: [
			{
				prefix: "break",
				classPrefix: "break",
				values: {
					normal: "break-normal",
					all: "break-all",
					keep: "break-keep",
				},
				var: "--builder-word-break",
				group: "typography",
			},
		],
	},
	{
		id: "overflowWrap",
		label: "Overflow Wrap",
		types: ["enum"],
		members: [
			{
				prefix: "break",
				classPrefix: "break",
				values: {
					breakWord: "wrap-break-word",
					anywhere: "wrap-anywhere",
					normal: "wrap-normal",
				},
				var: "--builder-overflow-wrap",
				group: "typography",
			},
		],
	},
	{
		id: "hypens",
		label: "Hypens",
		types: ["enum"],
		members: [
			{
				prefix: "hypens",
				classPrefix: "hypens",
				values: {
					none: "hypens-none",
					manual: "hypens-manual",
					auto: "hypens-auto",
				},
				var: "--builder-hypens",
				group: "typography",
			},
		],
	},
	/* bg */
	{
		id: "bacgkround",
		label: "Background",
		members: [
			{
				label: "Background Attachment",
				types: ["enum"],
				prefix: "bg",
				classPrefix: "bg",
				values: { fixed: "bg-fixed", local: "bg-local", scroll: "bg-scroll" },
				var: "--builder-bg-attachment",
				group: "backgrounds",
			},
			{
				label: "Background Clip",
				types: ["enum"],
				prefix: "bg",
				classPrefix: "bg",
				values: {
					border: "bg-clip-border",
					padding: "bg-clip-padding",
					content: "bg-clip-content",
					text: "bg-clip-text",
				},
				var: "--builder-bg-clip",
				group: "backgrounds",
			},
			{
				label: "Background Color",
				types: ["enum", "color", "custom-property", "arbitrary"],
				prefix: "bg",
				classPrefix: "bg",
				values: {
					...getTwColorClasses("bg"),
				},
				var: "--builder-bg-color",
				group: "backgrounds",
			},
		],
	},
	{
		id: "backgroundImage",
		members: [
			{
				label: "Background Image",
				types: ["enum", "image", "custom-property", "arbitrary"],
				prefix: "bg",
				classPrefix: "bg",
				values: {
					...getTwColorClasses("bg"),
				},
				var: "--builder-bg-image",
				group: "backgrounds",
			},
			{
				label: "Background Linear",
				prefix: "bg-linear",
				classPrefix: "bg-linear",
				types: ["enum", "arbitrary", "custom-property", "angle"],
				values: {
					linearToTop: "bg-linear-to-t",
					linearToTopRight: "bg-linear-to-tr",
					linearToTopLeft: "bg-linear-to-tl",
					linearToBottomRight: "bg-linear-to-br",
					linearToBottom: "bg-linear-to-b",
					linearToBottomLeft: "bg-linear-to-bl",
					linearToRight: "bg-linear-to-r",
					linearToLeft: "bg-linear-to-l",
				},
				var: "--builder-bg-image",
				group: "backgrounds",
			},
			{
				label: "Background Radial",
				prefix: "bg-radial",
				classPrefix: "bg-radial",
				types: ["enum", "arbitrary", "custom-property"],
				values: {
					default: "bg-radial",
				},
				var: "--builder-bg-image",
				group: "backgrounds",
			},
			{
				label: "Background Conic",
				prefix: "bg-conic",
				classPrefix: "bg-conic",
				types: ["enum", "arbitrary", "custom-property"],
				values: {
					default: "bg-conic",
				},
				var: "--builder-bg-image",
				group: "backgrounds",
			},
			{
				label: "Background Origin",
				types: ["enum"],
				prefix: "bg-origin",
				classPrefix: "bg-origin",
				values: { border: "bg-origin-border", content: "bg-origin-content", padding: "bg-origin-padding" },
				var: "--builder-bg-origin",
				group: "backgrounds",
			},
			{
				label: "Background Position",
				prefix: "bg-position",
				classPrefix: "bg-position",
				types: ["enum", "arbitrary", "custom-property"],
				values: {
					topLeft: "bg-top-left",
					top: "bg-top",
					topRight: "bg-top-right",
					left: "bg-left",
					right: "bg-right",
					center: "bg-center",
					bottom: "bg-bottom",
					bottomLeft: "bg-bottom-left",
					bottomRight: "bg-bottom-right",
				},
				var: "--builder-bg-position",
				group: "backgrounds",
			},
			{
				label: "Background Repeat",
				prefix: "",
				classPrefix: "",
				types: ["enum"],
				values: {
					repeat: "bg-repeat",
					repeatX: "bg-repeat-x",
					repeatY: "bg-repeat-y",
					space: "bg-repeat-space",
					round: "bg-repeat-round",
					noRepeat: "bg-no-repeat",
				},
				var: "--builder-bg-repeat",
				group: "backgrounds",
			},
			{
				label: "Background Size",
				prefix: "bg-size",
				classPrefix: "bg-size",
				types: ["enum"],
				values: {
					cover: "bg-cover",
					auto: "bg-auto",
					contain: "bg-contain",
				},
				var: "--builder-bg-size",
				group: "backgrounds",
			},
		],
	},
	{
		id: "from",
		label: "Background From",
		types: ["arbitrary", "custom-property", "percentage", "color"],
		members: [
			{
				label: "From",
				prefix: "from",
				classPrefix: "from",
				values: {},
				var: "--builder-bg-from",
				group: "backgrounds",
			},
		],
	},
	{
		id: "via",
		label: "Background Via",
		types: ["arbitrary", "custom-property", "percentage", "color"],
		members: [
			{
				label: "Via",
				prefix: "via",
				classPrefix: "via",
				values: {},
				var: "--builder-bg-via",
				group: "backgrounds",
			},
		],
	},
	{
		id: "to",
		label: "Background To",
		types: ["arbitrary", "custom-property", "percentage", "color"],
		members: [
			{
				label: "To",
				prefix: "to",
				classPrefix: "to",
				values: {},
				var: "--builder-bg-to",
				group: "backgrounds",
			},
		],
	},
	/* borders */
	{
		id: "rounded",
		label: "Border Rounded",
		members: [
			{
				label: "Rounded",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded",
				classPrefix: "rounded",
				values: {
					none: "rounded-none",
					full: "rounded-full",
					xs: "rounded-xs",
					sm: "rounded-sm",
					md: "rounded-md",
					lg: "rounded-lg",
					xl: "rounded-xl",
					"2xl": "rounded-2xl",
					"3xl": "rounded-3xl",
					"4xl": "rounded-4xl",
				},
				var: "--builder-rounded",
				group: "borders",
			},
			{
				label: "Rounded Start",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-s",
				classPrefix: "rounded-s",
				values: {
					none: "rounded-s-none",
					full: "rounded-s-full",
					xs: "rounded-s-xs",
					sm: "rounded-s-sm",
					md: "rounded-s-md",
					lg: "rounded-s-lg",
					xl: "rounded-s-xl",
					"2xl": "rounded-s-2xl",
					"3xl": "rounded-s-3xl",
					"4xl": "rounded-s-4xl",
				},
				var: "--builder-rounded-start",
				group: "borders",
			},
			{
				label: "Rounded Start Start",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-ss",
				classPrefix: "rounded-ss",
				values: {
					none: "rounded-ss-none",
					full: "rounded-ss-full",
					xs: "rounded-ss-xs",
					sm: "rounded-ss-sm",
					md: "rounded-ss-md",
					lg: "rounded-ss-lg",
					xl: "rounded-ss-xl",
					"2xl": "rounded-ss-2xl",
					"3xl": "rounded-ss-3xl",
					"4xl": "rounded-ss-4xl",
				},
				var: "--builder-rounded-start-start",
				group: "borders",
			},
			{
				label: "Rounded Start End",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-se",
				classPrefix: "rounded-se",
				values: {
					none: "rounded-se-none",
					full: "rounded-se-full",
					xs: "rounded-se-xs",
					sm: "rounded-se-sm",
					md: "rounded-se-md",
					lg: "rounded-se-lg",
					xl: "rounded-se-xl",
					"2xl": "rounded-se-2xl",
					"3xl": "rounded-se-3xl",
					"4xl": "rounded-se-4xl",
				},
				var: "--builder-rounded-start-end",
				group: "borders",
			},
			{
				label: "Rounded End",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-e",
				classPrefix: "rounded-e",
				values: {
					none: "rounded-e-none",
					full: "rounded-e-full",
					xs: "rounded-e-xs",
					sm: "rounded-e-sm",
					md: "rounded-e-md",
					lg: "rounded-e-lg",
					xl: "rounded-e-xl",
					"2xl": "rounded-e-2xl",
					"3xl": "rounded-e-3xl",
					"4xl": "rounded-e-4xl",
				},
				var: "--builder-rounded-end",
				group: "borders",
			},
			{
				label: "Rounded End Start",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-es",
				classPrefix: "rounded-es",
				values: {
					none: "rounded-es-none",
					full: "rounded-es-full",
					xs: "rounded-es-xs",
					sm: "rounded-es-sm",
					md: "rounded-es-md",
					lg: "rounded-es-lg",
					xl: "rounded-es-xl",
					"2xl": "rounded-es-2xl",
					"3xl": "rounded-es-3xl",
					"4xl": "rounded-es-4xl",
				},
				var: "--builder-rounded-end-start",
				group: "borders",
			},
			{
				label: "Rounded End End",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-ee",
				classPrefix: "rounded-ee",
				values: {
					none: "rounded-ee-none",
					full: "rounded-ee-full",
					xs: "rounded-ee-xs",
					sm: "rounded-ee-sm",
					md: "rounded-ee-md",
					lg: "rounded-ee-lg",
					xl: "rounded-ee-xl",
					"2xl": "rounded-ee-2xl",
					"3xl": "rounded-ee-3xl",
					"4xl": "rounded-ee-4xl",
				},
				var: "--builder-rounded-end-end",
				group: "borders",
			},
			{
				label: "Rounded Top",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-t",
				classPrefix: "rounded-t",
				values: {
					none: "rounded-t-none",
					full: "rounded-t-full",
					xs: "rounded-t-xs",
					sm: "rounded-t-sm",
					md: "rounded-t-md",
					lg: "rounded-t-lg",
					xl: "rounded-t-xl",
					"2xl": "rounded-t-2xl",
					"3xl": "rounded-t-3xl",
					"4xl": "rounded-t-4xl",
				},
				var: "--builder-rounded-top",
				group: "borders",
			},
			{
				label: "Rounded Top Left",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-tl",
				classPrefix: "rounded-tl",
				values: {
					none: "rounded-tl-none",
					full: "rounded-tl-full",
					xs: "rounded-tl-xs",
					sm: "rounded-tl-sm",
					md: "rounded-tl-md",
					lg: "rounded-tl-lg",
					xl: "rounded-tl-xl",
					"2xl": "rounded-tl-2xl",
					"3xl": "rounded-tl-3xl",
					"4xl": "rounded-tl-4xl",
				},
				var: "--builder-rounded-top-left",
				group: "borders",
			},
			{
				label: "Rounded Top Right",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-tr",
				classPrefix: "rounded-tr",
				values: {
					none: "rounded-tr-none",
					full: "rounded-tr-full",
					xs: "rounded-tr-xs",
					sm: "rounded-tr-sm",
					md: "rounded-tr-md",
					lg: "rounded-tr-lg",
					xl: "rounded-tr-xl",
					"2xl": "rounded-tr-2xl",
					"3xl": "rounded-tr-3xl",
					"4xl": "rounded-tr-4xl",
				},
				var: "--builder-rounded-top-right",
				group: "borders",
			},
			{
				label: "Rounded Left",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-l",
				classPrefix: "rounded-l",
				values: {
					none: "rounded-l-none",
					full: "rounded-l-full",
					xs: "rounded-l-xs",
					sm: "rounded-l-sm",
					md: "rounded-l-md",
					lg: "rounded-l-lg",
					xl: "rounded-l-xl",
					"2xl": "rounded-l-2xl",
					"3xl": "rounded-l-3xl",
					"4xl": "rounded-l-4xl",
				},
				var: "--builder-rounded-left",
				group: "borders",
			},
			{
				label: "Rounded Right",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-r",
				classPrefix: "rounded-r",
				values: {
					none: "rounded-r-none",
					full: "rounded-r-full",
					xs: "rounded-r-xs",
					sm: "rounded-r-sm",
					md: "rounded-r-md",
					lg: "rounded-r-lg",
					xl: "rounded-r-xl",
					"2xl": "rounded-r-2xl",
					"3xl": "rounded-r-3xl",
					"4xl": "rounded-r-4xl",
				},
				var: "--builder-rounded-right",
				group: "borders",
			},
			{
				label: "Rounded Bottom",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-b",
				classPrefix: "rounded-b",
				values: {
					none: "rounded-b-none",
					full: "rounded-b-full",
					xs: "rounded-b-xs",
					sm: "rounded-b-sm",
					md: "rounded-b-md",
					lg: "rounded-b-lg",
					xl: "rounded-b-xl",
					"2xl": "rounded-b-2xl",
					"3xl": "rounded-b-3xl",
					"4xl": "rounded-b-4xl",
				},
				var: "--builder-rounded-bottom",
				group: "borders",
			},
			{
				label: "Rounded Bottom Right",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-br",
				classPrefix: "rounded-br",
				values: {
					none: "rounded-br-none",
					full: "rounded-br-full",
					xs: "rounded-br-xs",
					sm: "rounded-br-sm",
					md: "rounded-br-md",
					lg: "rounded-br-lg",
					xl: "rounded-br-xl",
					"2xl": "rounded-br-2xl",
					"3xl": "rounded-br-3xl",
					"4xl": "rounded-br-4xl",
				},
				var: "--builder-rounded-bottom-right",
				group: "borders",
			},
			{
				label: "Rounded Bottom Left",
				types: ["enum", "custom-property", "number"],
				prefix: "rounded-bl",
				classPrefix: "rounded-bl",
				values: {
					none: "rounded-bl-none",
					full: "rounded-bl-full",
					xs: "rounded-bl-xs",
					sm: "rounded-bl-sm",
					md: "rounded-bl-md",
					lg: "rounded-bl-lg",
					xl: "rounded-bl-xl",
					"2xl": "rounded-bl-2xl",
					"3xl": "rounded-bl-3xl",
					"4xl": "rounded-bl-4xl",
				},
				var: "--builder-rounded-bottom-left",
				group: "borders",
			},
		],
	},
	{
		id: "borderWidth",
		label: "Border Width",
		members: [
			{
				label: "Border Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border",
				classPrefix: "border",
				values: {},
				var: "--builder-border-width",
				group: "borders",
			},
			{
				label: "Border X Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-x",
				classPrefix: "border-x",
				values: {},
				var: "--builder-border-x-width",
				group: "borders",
			},
			{
				label: "Border Y Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-y",
				classPrefix: "border-y",
				values: {},
				var: "--builder-border-y-width",
				group: "borders",
			},
			{
				label: "Border Start Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-s",
				classPrefix: "border-s",
				values: {},
				var: "--builder-border-start-width",
				group: "borders",
			},
			{
				label: "Border End Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-e",
				classPrefix: "border-e",
				values: {},
				var: "--builder-border-end-width",
				group: "borders",
			},
			{
				label: "Border Top Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-t",
				classPrefix: "border-t",
				values: {},
				var: "--builder-border-top-width",
				group: "borders",
			},
			{
				label: "Border Left Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-l",
				classPrefix: "border-l",
				values: {},
				var: "--builder-border-left-width",
				group: "borders",
			},
			{
				label: "Border Right Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-r",
				classPrefix: "border-r",
				values: {},
				var: "--builder-border-right-width",
				group: "borders",
			},
			{
				label: "Border Bottom Width",
				types: ["custom-property", "number", "arbitrary", "length"],
				prefix: "border-b",
				classPrefix: "border-b",
				values: {},
				var: "--builder-border-bottom-width",
				group: "borders",
			},
		],
	},
	{
		id: "divide",
		label: "Divide",
		members: [
			{
				label: "Divide X",
				types: ["enum", "arbitrary", "number"],
				prefix: "divide-x",
				classPrefix: "divide-x",
				values: {
					divideX: "divide-x",
					reverse: "divide-x-reverse",
				},
				var: "--builder-divide-x",
				group: "borders",
			},
			{
				label: "Divide Y",
				types: ["enum", "arbitrary", "number"],
				prefix: "divide-y",
				classPrefix: "divide-y",
				values: {
					divideY: "divide-y",
					reverse: "divide-y-reverse",
				},
				var: "--builder-divide-y",
				group: "borders",
			},
		],
	},
	{
		id: "border",
		label: "Border",
		members: [
			{
				prefix: "border",
				classPrefix: "border",
				types: ["enum", "color", "custom-property"],
				values: {
					...getTwColorClasses("border"),
				},
				var: "--builder-border-color",
				group: "borders",
			},
			{
				label: "Border Style",
				prefix: "border",
				classPrefix: "border",
				types: ["enum"],
				values: {
					solid: "border-solid",
					dashed: "border-dashed",
					dotted: "border-dotted",
					double: "border-double",
					hidden: "border-hidden",
					none: "border-none",
				},
				var: "--builder-border-style",
				group: "borders",
			},
			{
				label: "Border Style Divide",
				prefix: "divide",
				classPrefix: "divide",
				types: ["enum"],
				values: {
					solid: "divide-solid",
					dashed: "divide-dashed",
					dotted: "divide-dotted",
					double: "divide-double",
					hidden: "divide-hidden",
					none: "divide-none",
				},
				var: "--builder-border-style",
				group: "borders",
			},
		],
	},
	{
		id: "outline",
		label: "Outline",
		members: [
			{
				label: "Outline Width",
				prefix: "outline",
				classPrefix: "outline",
				types: ["length", "arbitrary", "custom-property"],
				values: {},
				var: "--builder-outline-width",
				group: "borders",
			},
			{
				label: "Outline Color",
				prefix: "outline",
				classPrefix: "outline",
				types: ["enum", "color", "custom-property"],
				values: {
					...getTwColorClasses("outline"),
				},
				var: "--builder-outline-color",
				group: "borders",
			},
			{
				label: "Outline Stlye",
				prefix: "outline",
				classPrefix: "outline",
				types: ["enum"],
				values: {
					solid: "outline-solid",
					dashed: "outline-dashed",
					dotted: "outline-dotted",
					double: "outline-double",
					none: "outline-none",
					hidden: "outline-hidden",
				},
				var: "--builder-outline-style",
				group: "borders",
			},
		],
	},
	{
		id: "outlineOffset",
		label: "Outline Offset",
		types: ["number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "outline-offset",
				classPrefix: "outline-offset",
				values: {},
				var: "--builder-outline-offset",
				group: "borders",
			},
		],
	},
	/* effects */
	{
		id: "boxShadow",
		label: "Shadow",
		members: [
			{
				label: "Shadow Width",
				prefix: "shadow",
				classPrefix: "shadow",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					xs: "shadow-xs",
					sm: "shadow-sm",
					md: "shadow-md",
					lg: "shadow-lg",
					xl: "shadow-xl",
					"2xs": "shadow-2xs",
					"2xl": "shadow-2xl",
					none: "shadow-none",
				},
				var: "--builder-box-shadow",
				group: "effects",
			},
			{
				label: "Shadow Color",
				prefix: "shadow",
				classPrefix: "shadow",
				types: ["enum", "arbitrary", "custom-property", "color"],
				values: {
					...getTwColorClasses("shadow"),
				},
				var: "--builder-box-shadow-color",
				group: "effects",
			},
		],
	},
	{
		id: "boxShadowInset",
		label: "Inset Shadow",
		members: [
			{
				label: "Inset Width",
				prefix: "inset-shadow",
				classPrefix: "inset-shadow",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					xs: "inset-shadow-xs",
					sm: "inset-shadow-sm",
					"2xs": "inset-shadow-2xs",
					none: "inset-shadow-none",
				},
				var: "--builder-box-inset-shadow",
				group: "effects",
			},
			{
				label: "Inset Color",
				prefix: "inset-shadow",
				classPrefix: "inset-shadow",
				types: ["enum", "arbitrary", "custom-property", "color"],
				values: {
					...getTwColorClasses("inset-shadow"),
				},
				var: "--builder-box-inset-shadow-color",
				group: "effects",
			},
		],
	},
	{
		id: "ring",
		label: "Ring Shadow",
		members: [
			{
				label: "Ring Width",
				prefix: "ring",
				classPrefix: "ring",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					ring: "ring",
				},
				var: "--builder-ring",
				group: "effects",
			},
			{
				label: "Ring Color",
				prefix: "ring",
				classPrefix: "ring",
				types: ["enum", "arbitrary", "custom-property", "color"],
				values: {
					...getTwColorClasses("ring"),
				},
				var: "--builder-ring-color",
				group: "effects",
			},
		],
	},
	{
		id: "insetRing",
		label: "Inset Ring Shadow",
		members: [
			{
				label: "Inset Ring Width",
				prefix: "inset-ring",
				classPrefix: "inset-ring",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					"inset-ring": "inset-ring",
				},
				var: "--builder-inset-ring",
				group: "effects",
			},
			{
				label: "Inset Ring Color",
				prefix: "inset-ring",
				classPrefix: "inset-ring",
				types: ["enum", "arbitrary", "custom-property", "color"],
				values: {
					...getTwColorClasses("inset-ring"),
				},
				var: "--builder-inset-ring-color",
				group: "effects",
			},
		],
	},
	{
		id: "textShadow",
		label: "Text Shadow",
		members: [
			{
				label: "Text Shadow Width",
				prefix: "text-shadow",
				classPrefix: "text-shadow",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					xs: "text-shadow-xs",
					sm: "text-shadow-sm",
					"2xs": "text-shadow-2xs",
					none: "text-shadow-none",
				},
				var: "--builder-text-shadow",
				group: "effects",
			},
			{
				label: "Text Shadow Color",
				prefix: "text-shadow",
				classPrefix: "text-shadow",
				types: ["enum", "arbitrary", "custom-property", "color"],
				values: {
					...getTwColorClasses("text-shadow"),
				},
				var: "--builder-text-shadow-color",
				group: "effects",
			},
		],
	},
	{
		id: "opacity",
		label: "Opacity",
		types: ["number", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "opacity",
				classPrefix: "opacity",
				values: {},
				var: "--builder-opacity",
				group: "effects",
			},
		],
	},
	{
		id: "mixBlendMode",
		label: "Mix Blend Mode",
		types: ["enum"],
		members: [
			{
				prefix: "mix-blend",
				classPrefix: "mix-blend",
				values: {
					normal: "mix-blend-normal",
					multiply: "mix-blend-multiply",
					screen: "mix-blend-screen",
					overlay: "mix-blend-overlay",
					darken: "mix-blend-darken",
					lighten: "mix-blend-lighten",
					"color-dodge": "mix-blend-color-dodge",
					"color-burn": "mix-blend-color-burn",
					"color-light": "mix-blend-color-light",
					"soft-light": "mix-blend-soft-light",
					difference: "mix-blend-difference",
					exclusion: "mix-blend-exclusion",
					hue: "mix-blend-hue",
					saturation: "mix-blend-saturation",
					color: "mix-blend-color",
					luminosity: "mix-blend-luminosity",
					"plus-darker": "mix-blend-plus-darker",
					"plus-lighter": "mix-blend-plus-lighter",
				},
				var: "--builder-mix-blend",
				group: "effects",
			},
		],
	},
	{
		id: "bgBlendMode",
		label: "Background Blend Mode",
		types: ["enum"],
		members: [
			{
				prefix: "bg-blend",
				classPrefix: "bg-blend",
				values: {
					normal: "bg-blend-normal",
					multiply: "bg-blend-multiply",
					screen: "bg-blend-screen",
					overlay: "bg-blend-overlay",
					darken: "bg-blend-darken",
					lighten: "bg-blend-lighten",
					"color-dodge": "bg-blend-color-dodge",
					"color-burn": "bg-blend-color-burn",
					"color-light": "bg-blend-color-light",
					"soft-light": "bg-blend-soft-light",
					difference: "bg-blend-difference",
					exclusion: "bg-blend-exclusion",
					hue: "bg-blend-hue",
					saturation: "bg-blend-saturation",
					color: "bg-blend-color",
					luminosity: "bg-blend-luminosity",
				},
				var: "--builder-background-blend",
				group: "effects",
			},
		],
	},
	{
		id: "maskClip",
		label: "Mask Clip",
		types: ["enum"],
		members: [
			{
				prefix: "",
				classPrefix: "",
				values: {
					border: "mask-clip-border",
					padding: "mask-clip-padding",
					content: "mask-clip-content",
					fill: "mask-clip-fill",
					stroke: "mask-clip-stroke",
					view: "mask-clip-view",
					"no-clip": "mask-no-clip",
				},
				var: "--builder-mask-clip",
				group: "effects",
			},
		],
	},
	{
		id: "maskComposite",
		label: "Mask Composite",
		types: ["enum"],
		members: [
			{
				prefix: "mask",
				classPrefix: "mask",
				values: {
					exclude: "mask-exclude",
					add: "mask-add",
					substract: "mask-substract",
					intersect: "mask-intersect",
				},
				var: "--builder-mask-composite",
				group: "effects",
			},
		],
	},
	{
		id: "maskMode",
		label: "Mask Mode",
		types: ["enum"],
		members: [
			{
				prefix: "mask",
				classPrefix: "mask",
				values: {
					alpha: "mask-alpha",
					luminance: "mask-luminance",
					match: "mask-match",
				},
				var: "--builder-mask-mode",
				group: "effects",
			},
		],
	},
	{
		id: "maskOrigin",
		label: "Mask Origin",
		types: ["enum"],
		members: [
			{
				prefix: "mask-origin",
				classPrefix: "mask-origin",
				values: {
					border: "mask-origin-border",
					padding: "mask-origin-padding",
					content: "mask-origin-content",
					fill: "mask-origin-fill",
					stroke: "mask-origin-stroke",
					view: "mask-origin-view",
				},
				var: "--builder-mask-origin",
				group: "effects",
			},
		],
	},
	{
		id: "maskPosition",
		label: "Mask Position",
		types: ["arbitrary", "number"],
		members: [
			{
				prefix: "mask-position",
				classPrefix: "mask-position",
				values: {},
				var: "--builder-mask-position",
				group: "effects",
			},
			{
				prefix: "mask",
				classPrefix: "mask",
				values: {
					topLeft: "mask-top-left",
					topRight: "mask-top-right",
					top: "mask-top",
					left: "mask-left",
					right: "mask-right",
					bottom: "mask-bottom",
					bottomRight: "mask-bottom-right",
					bottomLeft: "mask-bottom-left",
				},
				var: "--builder-mask-position",
				group: "effects",
			},
		],
	},
	{
		id: "maskRepeat",
		label: "Mask Repeat",
		types: ["enum"],
		members: [
			{
				prefix: "",
				classPrefix: "",
				values: {
					repeat: "mask-repeat",
					noRepeat: "mask-no-repeat",
					repeatX: "mask-repeat-x",
					repeatY: "mask-repeat-y",
					space: "mask-repeat-space",
					round: "mask-repeat-round",
				},
				var: "--builder-mask-repeat",
				group: "effects",
			},
		],
	},
	{
		id: "maskSize",
		label: "Mask Size",
		types: ["enum", "number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "mask",
				classPrefix: "mask",
				values: {
					auto: "mask-auto",
					cover: "mask-cover",
					contain: "mask-contain",
				},
				var: "--builder-mask-repeat",
				group: "effects",
			},
		],
	},
	{
		id: "maskType",
		label: "Mask Type",
		types: ["enum"],
		members: [
			{
				prefix: "mask-type",
				classPrefix: "mask-type",
				values: {
					alpha: "mask-type-alpha",
					luminance: "mask-type-luminance",
				},
				var: "--builder-mask-type",
				group: "effects",
			},
		],
	},
	{
		id: "maskImage",
		label: "Mask Image",
		members: [
			{
				label: "Mask Image",
				prefix: "mask",
				classPrefix: "mask",
				types: ["arbitrary", "custom-property", "enum"],
				values: {
					none: "mask-none",
					circle: "mask-circle",
					ellipse: "mask-ellipse",
				},
				var: "--builder-mask-image",
				group: "effects",
			},
			{
				label: "Mask Image Linear",
				prefix: "mask-linear",
				classPrefix: "mask-linear",
				types: ["number", "negative"],
				values: {},
				var: "--builder-mask-image-linear",
				group: "effects",
			},
			{
				label: "Mask Image Linear From",
				prefix: "mask-linear-from",
				classPrefix: "mask-linear-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-linear-from",
				group: "effects",
			},
			{
				label: "Mask Image Linear To",
				prefix: "mask-linear-to",
				classPrefix: "mask-linear-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-linear-to",
				group: "effects",
			},
			{
				label: "Mask Image Top From",
				prefix: "mask-t-from",
				classPrefix: "mask-t-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-top-from",
				group: "effects",
			},
			{
				label: "Mask Image Top To",
				prefix: "mask-t-to",
				classPrefix: "mask-t-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-top-to",
				group: "effects",
			},
			{
				label: "Mask Image Right From",
				prefix: "mask-r-from",
				classPrefix: "mask-r-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-right-from",
				group: "effects",
			},
			{
				label: "Mask Image Right To",
				prefix: "mask-r-to",
				classPrefix: "mask-r-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-right-to",
				group: "effects",
			},
			{
				label: "Mask Image Left From",
				prefix: "mask-l-from",
				classPrefix: "mask-l-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-left-from",
				group: "effects",
			},
			{
				label: "Mask Image Left To",
				prefix: "mask-l-to",
				classPrefix: "mask-l-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-left-to",
				group: "effects",
			},
			{
				label: "Mask Image Bottom From",
				prefix: "mask-b-from",
				classPrefix: "mask-b-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-bottom-from",
				group: "effects",
			},
			{
				label: "Mask Image Bottom To",
				prefix: "mask-b-to",
				classPrefix: "mask-b-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-bottom-to",
				group: "effects",
			},
			{
				label: "Mask Image X From",
				prefix: "mask-x-from",
				classPrefix: "mask-x-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-x-from",
				group: "effects",
			},
			{
				label: "Mask Image X To",
				prefix: "mask-x-to",
				classPrefix: "mask-x-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-x-to",
				group: "effects",
			},
			{
				label: "Mask Image Y From",
				prefix: "mask-y-from",
				classPrefix: "mask-y-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-y-from",
				group: "effects",
			},
			{
				label: "Mask Image Y To",
				prefix: "mask-y-to",
				classPrefix: "mask-y-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-y-to",
				group: "effects",
			},

			{
				label: "Mask Image Radial",
				prefix: "mask-radial",
				classPrefix: "mask-radial",
				types: ["enum", "arbitrary", "doubledSize", "size", "percentage"],
				values: {
					"closest-corner": "mask-radial-closest-corner",
					"closest-side": "mask-radial-closest-side",
					"farthest-corner": "mask-radial-farthest-corner",
					"farthest-side": "mask-radial-farthest-side",
					"at-top-left": "mask-radial-at-top-left",
					"at-top": "mask-radial-at-top",
					"at-top-right": "mask-radial-at-top-right",
					"at-right": "mask-radial-at-right",
					"at-center": "mask-radial-at-center",
					"at-left": "mask-radial-at-left",
					"at-bottom": "mask-radial-at-bottom",
					"at-bottom-left": "mask-radial-at-bottom-left",
					"at-bottom-right": "mask-radial-at-bottom-right",
				},
				var: "--builder-mask-image-radial",
				group: "effects",
			},
			{
				label: "Mask Image Radial From",
				prefix: "mask-radial-from",
				classPrefix: "mask-radial-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-radial-from",
				group: "effects",
			},
			{
				label: "Mask Image Radial To",
				prefix: "mask-radial-to",
				classPrefix: "mask-radial-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-radial-to",
				group: "effects",
			},

			{
				label: "Mask Image Conic",
				prefix: "mask-conic",
				classPrefix: "mask-conic",
				types: ["number", "negative"],
				values: {},
				var: "--builder-mask-image-conic",
				group: "effects",
			},
			{
				label: "Mask Image Conic From",
				prefix: "mask-conic-from",
				classPrefix: "mask-conic-from",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-conic-from",
				group: "effects",
			},
			{
				label: "Mask Image Conic To",
				prefix: "mask-conic-to",
				classPrefix: "mask-conic-to",
				types: ["number", "negative", "number", "percentage", "color", "arbitrary", "enum", "custom-property"],
				values: {},
				var: "--builder-mask-image-conic-to",
				group: "effects",
			},
		],
	},
	/* Fiilters */
	{
		id: "filter",
		label: "Filter",
		types: ["enum", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "filter",
				classPrefix: "filter",
				values: {
					none: "filter-none",
				},
				var: "--builder-filter",
				group: "filters",
			},
		],
	},
	{
		id: "blur",
		label: "Blur",
		types: ["enum", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "blur",
				classPrefix: "blur",
				values: {
					none: "blur-none",
					xs: "blur-xs",
					sm: "blur-sm",
					md: "blur-md",
					lg: "blur-lg",
					xl: "blur-xl",
					"2xl": "blur-2xl",
					"3xl": "blur-3xl",
				},
				var: "--builder-blur",
				group: "filters",
			},
		],
	},
	{
		id: "brightness",
		label: "Brightness",
		types: ["custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "brightness",
				classPrefix: "brightness",
				values: {},
				var: "--builder-brightness",
				group: "filters",
			},
		],
	},
	{
		id: "contrast",
		label: "Contrast",
		types: ["custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "contrast",
				classPrefix: "contrast",
				values: {},
				var: "--builder-contrast",
				group: "filters",
			},
		],
	},
	{
		id: "dropShadowStyle",
		label: "Drop Shadow Style",
		types: ["enum", "color"],
		members: [
			{
				prefix: "contrast",
				classPrefix: "contrast",
				values: {
					none: "drop-shadow-none",
					xs: "drop-shadow-xs",
					sm: "drop-shadow-sm",
					md: "drop-shadow-md",
					lg: "drop-shadow-lg",
					xl: "drop-shadow-xl",
					"2xl": "drop-shadow-2xl",
					...getTwColorClasses("drop-shadow"),
				},
				var: "--builder-drop-shadow",
				group: "filters",
			},
		],
	},
	{
		id: "dropShadowColor",
		label: "Drop Shadow Color",
		types: ["enum", "color", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "contrast",
				classPrefix: "contrast",
				values: {
					...getTwColorClasses("drop-shadow"),
				},
				var: "--builder-drop-shadow-color",
				group: "filters",
			},
		],
	},
	{
		id: "grayscale",
		label: "Grayscale",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "grayscale",
				classPrefix: "grayscale",
				values: {
					grayscale: "grayscale",
				},
				var: "--builder-grayscale",
				group: "filters",
			},
		],
	},
	{
		id: "hueRotate",
		label: "Hue Rotate",
		types: ["custom-property", "arbitrary", "number", "negative"],
		members: [
			{
				prefix: "hue-rotate",
				classPrefix: "hue-rotate",
				values: {},
				var: "--builder-hue-rotate",
				group: "filters",
			},
		],
	},
	{
		id: "invert",
		label: "Invert",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "invert",
				classPrefix: "invert",
				values: {
					invert: "invert",
				},
				var: "--builder-invert",
				group: "filters",
			},
		],
	},
	{
		id: "saturate",
		label: "Saturate",
		types: ["custom-property", "arbitrary", "number", "negative"],
		members: [
			{
				prefix: "saturate",
				classPrefix: "saturate",
				values: {},
				var: "--builder-saturate",
				group: "filters",
			},
		],
	},
	{
		id: "sepia",
		label: "sepia",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "sepia",
				classPrefix: "sepia",
				values: {
					sepia: "sepia",
				},
				var: "--builder-sepia",
				group: "filters",
			},
		],
	},
	{
		id: "backdropFilter",
		label: "Backdrop Filter",
		types: ["enum", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "backdrop-filter",
				classPrefix: "backdrop-filter",
				values: {
					none: "backdrop-filter-none",
				},
				var: "--builder-backdrop-filter",
				group: "filters",
			},
		],
	},
	{
		id: "backdropFilterBlur",
		label: "Backdrop Filter Blur",
		types: ["enum", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "backdrop-blur",
				classPrefix: "backdrop-blur",
				values: {
					none: "backdrop-blur-none",
					xs: "backdrop-blur-xs",
					sm: "backdrop-blur-sm",
					md: "backdrop-blur-md",
					lg: "backdrop-blur-lg",
					xl: "backdrop-blur-xl",
					"2xl": "backdrop-blur-2xl",
					"3xl": "backdrop-blur-3xl",
				},
				var: "--builder-backdrop-blur",
				group: "filters",
			},
		],
	},
	{
		id: "backdropBrightness",
		label: "Backdrop Brightness",
		types: ["custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "backdrop-brightness",
				classPrefix: "backdrop-brightness",
				values: {},
				var: "--builder-backdrop-brightness",
				group: "filters",
			},
		],
	},
	{
		id: "backdropContrast",
		label: "Backdrop Contrast",
		types: ["custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "backdrop-contrast",
				classPrefix: "backdrop-contrast",
				values: {},
				var: "--builder-backdrop-contrast",
				group: "filters",
			},
		],
	},
	{
		id: "backdropGrayscale",
		label: "Backdrop Grayscale",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "backdrop-grayscale",
				classPrefix: "backdrop-grayscale",
				values: {
					grayscale: "backdrop-grayscale",
				},
				var: "--builder-backdrop-grayscale",
				group: "filters",
			},
		],
	},
	{
		id: "backdropHueRotate",
		label: "Backdrop Hue Rotate",
		types: ["custom-property", "arbitrary", "number", "negative"],
		members: [
			{
				prefix: "backdrop-hue-rotate",
				classPrefix: "backdrop-hue-rotate",
				values: {},
				var: "--builder-backdrop-hue-rotate",
				group: "filters",
			},
		],
	},
	{
		id: "backdropInvert",
		label: "Backdrop Invert",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "backdrop-invert",
				classPrefix: "backdrop-invert",
				values: {
					"backdrop-invert": "backdrop-invert",
				},
				var: "--builder-backdrop-invert",
				group: "filters",
			},
		],
	},
	{
		id: "backdropSaturate",
		label: "Backdrop Saturate",
		types: ["custom-property", "arbitrary", "number", "negative"],
		members: [
			{
				prefix: "backdrop-saturate",
				classPrefix: "backdrop-saturate",
				values: {},
				var: "--builder-backdrop-saturate",
				group: "filters",
			},
		],
	},
	{
		id: "backdropSepia",
		label: "backdropSepia",
		types: ["enum", "custom-property", "arbitrary", "number"],
		members: [
			{
				prefix: "backdrop-sepia",
				classPrefix: "backdrop-sepia",
				values: {
					sepia: "backdrop-sepia",
				},
				var: "--builder-backdrop-sepia",
				group: "filters",
			},
		],
	},
	/* tables */
	{
		id: "tableBorder",
		label: "Table Border Style",
		types: ["enum"],
		members: [
			{
				prefix: "border",
				classPrefix: "border",
				values: {
					collapse: "border-collapse",
					separate: "border-separate",
				},
				var: "--builder-table-border-style",
				group: "tables",
			},
		],
	},
	{
		id: "tableBorderSpacing",
		label: "Table Border Spacing",
		members: [
			{
				prefix: "border-spacing",
				classPrefix: "border-spacing",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-table-border-spacing",
				group: "tables",
			},
			{
				prefix: "border-spacing-x",
				classPrefix: "border-spacing-x",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-table-border-spacing-x",
				group: "tables",
			},
			{
				prefix: "border-spacing-y",
				classPrefix: "border-spacing-y",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-table-border-spacing-y",
				group: "tables",
			},
		],
	},
	{
		id: "tableLayout",
		label: "Table Layout",
		types: ["enum"],
		members: [
			{
				prefix: "table",
				classPrefix: "table",
				values: {
					auto: "table-auto",
					fixed: "table-fixed",
				},
				var: "--builder-table-layout",
				group: "tables",
			},
		],
	},
	{
		id: "tableCaptionType",
		label: "Table Caption Type",
		types: ["enum"],
		members: [
			{
				prefix: "caption",
				classPrefix: "caption",
				values: {
					top: "caption-top",
					caption: "caption-bottom",
				},
				var: "--builder-table-caption",
				group: "tables",
			},
		],
	},
	/* transitions */
	{
		id: "transition",
		label: "Transition",
		types: ["enum", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "transition",
				classPrefix: "transition",
				values: {
					none: "transition-none",
					transition: "transition",
					all: "transition-all",
					color: "transition-color",
					opacity: "transition-opacity",
					shadow: "transition-shadow",
					transform: "transition-transform",
				},
				var: "--builder-transition",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "transitionBehavior",
		label: "Transition Behavior",
		types: ["enum"],
		members: [
			{
				prefix: "transition",
				classPrefix: "transition",
				values: {
					normal: "transition-normal",
					discrete: "transition-discrete",
				},
				var: "--builder-transition-behavior",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "transitionDuration",
		label: "Transition Duration",
		types: ["enum", "arbitrary", "custom-property", "number"],
		members: [
			{
				prefix: "duration",
				classPrefix: "duration",
				values: {
					initial: "duration-initial",
				},
				var: "--builder-transition-duration",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "transitionStyle",
		label: "Transition Style",
		types: ["enum", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "ease",
				classPrefix: "ease",
				values: {
					in: "ease-in",
					out: "ease-out",
					"in-out": "ease-in-out",
					initial: "ease-initial",
					linear: "ease-linear",
				},
				var: "--builder-transition-style",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "transitionDelay",
		label: "Transition Delay",
		types: ["number", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "delay",
				classPrefix: "delay",
				values: {},
				var: "--builder-transition-delay",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "animate",
		label: "Animate",
		types: ["enum", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "animate",
				classPrefix: "animate",
				values: {
					spin: "animate-spin",
					ping: "animate-ping",
					pulse: "animate-pulse",
					bounce: "animate-bounce",
					none: "animate-none",
				},
				var: "--builder-transition-animate",
				group: "transitionsAndAnimation",
			},
		],
	},
	/* Transforms */
	{
		id: "backface",
		label: "Backface",
		types: ["enum"],
		members: [
			{
				prefix: "backface",
				classPrefix: "backface",
				values: {
					hidden: "backface-hidden",
					visible: "backface-visible",
				},
				var: "--builder-backface",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "perspective",
		label: "Perspective",
		types: ["enum", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "perspective",
				classPrefix: "perspective",
				values: {
					dramatic: "perspective-dramatic",
					near: "perspective-near",
					normal: "perspective-normal",
					midrange: "perspective-midrange",
					distance: "perspective-distance",
					none: "perspective-none",
				},
				var: "--builder-perspective",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "perspectiveOrigin",
		label: "Perspective Origin",
		types: ["enum", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "perspective-origin",
				classPrefix: "perspective-origin",
				values: {
					center: "perspective-origin-center",
					top: "perspective-origin-top",
					topRight: "perspective-origin-top-right",
					topLeft: "perspective-origin-top-left",
					left: "perspective-origin-left",
					right: "perspective-origin-right",
					bottom: "perspective-origin-bottom",
					bottomLeft: "perspective-origin-bottom-left",
					bottomRight: "perspective-origin-bottom-right",
				},
				var: "--builder-perspective-origin",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "rotate",
		label: "Rotate",
		members: [
			{
				label: "Rotate",
				prefix: "rotate",
				classPrefix: "rotate",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					none: "rotate-none",
				},
				var: "--builder-rotate",
				group: "transitionsAndAnimation",
			},
			{
				label: "Rotate X",
				prefix: "rotate-x",
				classPrefix: "rotate-x",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-rotate-x",
				group: "transitionsAndAnimation",
			},
			{
				label: "Rotate Y",
				prefix: "rotate-y",
				classPrefix: "rotate-y",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-rotate-y",
				group: "transitionsAndAnimation",
			},
			{
				label: "Rotate Z",
				prefix: "rotate-z",
				classPrefix: "rotate-z",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-rotate-z",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "scale",
		label: "Scale",
		members: [
			{
				label: "Scale",
				prefix: "scale",
				classPrefix: "scale",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					none: "scale-none",
					"3d": "scale-3d",
				},
				var: "--builder-scale",
				group: "transitionsAndAnimation",
			},
			{
				label: "Scale X",
				prefix: "scale-x",
				classPrefix: "scale-x",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-scale-x",
				group: "transitionsAndAnimation",
			},
			{
				label: "Scale Y",
				prefix: "scale-y",
				classPrefix: "scale-y",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-scale-y",
				group: "transitionsAndAnimation",
			},
			{
				label: "Scale Z",
				prefix: "scale-z",
				classPrefix: "scale-z",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-scale-z",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "skew",
		label: "Skew",
		members: [
			{
				label: "Skew",
				prefix: "skew",
				classPrefix: "skew",
				types: ["enum", "arbitrary", "custom-property", "number"],
				values: {
					none: "skew-none",
					"3d": "skew-3d",
				},
				var: "--builder-skew",
				group: "transitionsAndAnimation",
			},
			{
				label: "skew X",
				prefix: "skew-x",
				classPrefix: "skew-x",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-skew-x",
				group: "transitionsAndAnimation",
			},
			{
				label: "Skew Y",
				prefix: "skew-y",
				classPrefix: "skew-y",
				types: ["arbitrary", "custom-property", "number"],
				values: {},
				var: "--builder-skew-y",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "transform",
		label: "Transform",
		types: ["enum", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "transform",
				classPrefix: "transform",
				values: {
					none: "transform-none",
					gpu: "transform-gpu",
					cpu: "transform-cpu",
				},
				var: "--builder-transform",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "transformOrigin",
		label: "Transform Origin",
		types: ["enum", "arbitrary", "custom-property"],
		members: [
			{
				prefix: "origin",
				classPrefix: "origin",
				values: {
					center: "origin-center",
					top: "origin-top",
					topRight: "origin-top-right",
					topLeft: "origin-top-left",
					left: "origin-left",
					right: "origin-right",
					bottom: "origin-bottom",
					bottomRight: "origin-bottom-right",
					bottomLeft: "origin-bottom-left",
				},
				var: "--builder-transform-origin",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "transfromStyle",
		label: "Transform Style",
		types: ["enum"],
		members: [
			{
				prefix: "transform",
				classPrefix: "transform",
				values: {
					"3d": "transform-3d",
					flat: "transform-flat",
				},
				var: "--builder-transform-style",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "Translate",
		label: "translate",
		members: [
			{
				label: "Translate",
				prefix: "translate",
				classPrefix: "translate",
				types: ["enum", "arbitrary", "custom-property", "number", "negative"],
				values: {
					full: "translate-full",
					px: "translate-px",
					"-full": "-translate-full",
					"-px": "-translate-px",
					none: "translate-none",
				},
				var: "--builder-translate",
				group: "transitionsAndAnimation",
			},
			{
				label: "Translate X",
				prefix: "translate-x",
				classPrefix: "translate-x",
				types: ["enum", "arbitrary", "custom-property", "number", "negative"],
				values: {
					full: "translate-x-full",
					px: "translate-x-px",
					"-full": "-translate-x-full",
					"-px": "-translate-x-px",
				},
				var: "--builder-translate-x",
				group: "transitionsAndAnimation",
			},
			{
				label: "Translate Y",
				prefix: "translate-y",
				classPrefix: "translate-y",
				types: ["enum", "arbitrary", "custom-property", "number", "negative"],
				values: {
					full: "translate-y-full",
					px: "translate-y-px",
					"-full": "-translate-y-full",
					"-px": "-translate-y-px",
				},
				var: "--builder-translate-y",
				group: "transitionsAndAnimation",
			},
			{
				label: "Translate Z",
				prefix: "translate-z",
				classPrefix: "translate-z",
				types: ["enum", "arbitrary", "custom-property", "number", "negative"],
				values: {
					full: "translate-z-full",
					px: "translate-z-px",
					"-full": "-translate-z-full",
					"-px": "-translate-z-px",
				},
				var: "--builder-translate-z",
				group: "transitionsAndAnimation",
			},
		],
	},
	{
		id: "accentColor",
		label: "Accent Color",
		types: ["enum"],
		members: [
			{
				prefix: "accent",
				classPrefix: "accent",
				values: {
					...getTwColorClasses("accent"),
				},
				var: "--builder-accent-color",
				group: "interactivity",
			},
		],
	},
	{
		id: "appearance",
		label: "Appearance",
		types: ["enum"],
		members: [
			{
				prefix: "appearance",
				classPrefix: "appearance",
				values: {
					none: "appearance-none",
					auto: "appearance-auto",
				},
				var: "--builder-accent-appearance",
				group: "interactivity",
			},
		],
	},
	{
		id: "caretColor",
		label: "Caret Color",
		types: ["enum"],
		members: [
			{
				prefix: "caret",
				classPrefix: "caret",
				values: {
					...getTwColorClasses("caret"),
				},
				var: "--builder-caret-color",
				group: "interactivity",
			},
		],
	},
	{
		id: "colorScheme",
		label: "Color Scheme",
		types: ["enum"],
		members: [
			{
				prefix: "scheme",
				classPrefix: "scheme",
				values: {
					normal: "scheme-normal",
					dark: "scheme-dark",
					light: "scheme-light",
					lightDark: "scheme-light-dark",
					onlyDark: "scheme-only-dark",
					onlyLight: "scheme-only-light",
				},
				var: "--builder-scheme",
				group: "interactivity",
			},
		],
	},
	{
		id: "cursor",
		label: "Cursor Style",
		types: ["enum", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "cursor",
				classPrefix: "cursor",
				values: {
					auto: "cursor-auto",
					default: "cursor-default",
					pointer: "cursor-pointer",
					wait: "cursor-wait",
					text: "cursor-text",
					move: "cursor-move",
					help: "cursor-help",
					notAllowed: "cursor-not-allowed",
					none: "cursor-none",
					contextMenu: "cursor-context-menu",
					progress: "cursor-progress",
					cell: "cursor-cell",
					crosshair: "cursor-crosshair",
					verticalText: "cursor-vertical-text",
					alias: "cursor-alias",
					copy: "cursor-copy",
					noDrop: "cursor-no-drop",
					grab: "cursor-grab",
					grabbing: "cursor-grabbing",
					allScroll: "cursor-all-scroll",
					colResize: "cursor-col-resize",
					rowResize: "cursor-row-resize",
					nResize: "cursor-n-resize",
					eResize: "cursor-e-resize",
					sResize: "cursor-s-resize",
					wResize: "cursor-w-resize",
					neResize: "cursor-ne-resize",
					nwResize: "cursor-nw-resize",
					seResize: "cursor-se-resize",
					swResize: "cursor-sw-resize",
					ewResize: "cursor-ew-resize",
					nsResize: "cursor-ns-resize",
					neswResize: "cursor-nesw-resize",
					nwseResize: "cursor-nwse-resize",
					zoomIn: "cursor-zoom-in",
					zoomOut: "cursor-zoom-out",
				},
				var: "--builder-cursor",
				group: "interactivity",
			},
		],
	},
	{
		id: "fieldSizing",
		label: "Field Sizing",
		types: ["enum"],
		members: [
			{
				prefix: "field-sizing",
				classPrefix: "field-sizing",
				values: {
					fixed: "field-sizing-fixed",
					content: "field-sizing-content",
				},
				var: "--builder-field-sizing",
				group: "interactivity",
			},
		],
	},
	{
		id: "pointerEvents",
		label: "Pointer Events",
		types: ["enum"],
		members: [
			{
				prefix: "pointer-events",
				classPrefix: "pointer-events",
				values: {
					auto: "pointer-events-auto",
					none: "pointer-events-none",
				},
				var: "--builder-pointer-events",
				group: "interactivity",
			},
		],
	},
	{
		id: "resize",
		label: "Resize",
		types: ["enum"],
		members: [
			{
				prefix: "resize",
				classPrefix: "resize",
				values: {
					resize: "resize",
					resizeX: "resize-x",
					resizeY: "resize-y",
					none: "resize-none",
				},
				var: "--builder-resize",
				group: "interactivity",
			},
		],
	},
	{
		id: "scrollBehavior",
		label: "Scroll Behavior",
		types: ["enum"],
		members: [
			{
				prefix: "scroll-behavior",
				classPrefix: "scroll-behavior",
				values: {
					auto: "scroll-behavior-auto",
					smooth: "scroll-behavior-smooth",
				},
				var: "--builder-scroll-behavior",
				group: "interactivity",
			},
		],
	},
	{
		id: "scrollMargin",
		label: "Scroll Margin",
		members: [
			{
				label: "Scroll Margin",
				prefix: "scroll-m",
				classPrefix: "scroll-m",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin",
				group: "interactivity",
			},
			{
				label: "Scroll Margin Start",
				prefix: "scroll-ms",
				classPrefix: "scroll-ms",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-start",
				group: "interactivity",
			},
			{
				label: "Scroll Margin End",
				prefix: "scroll-me",
				classPrefix: "scroll-me",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-end",
				group: "interactivity",
			},
			{
				label: "Scroll Margin Y",
				prefix: "scroll-my",
				classPrefix: "scroll-my",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-y",
				group: "interactivity",
			},
			{
				label: "Scroll Margin X",
				prefix: "scroll-mx",
				classPrefix: "scroll-mx",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-x",
				group: "interactivity",
			},
			{
				label: "Scroll Margin Top",
				prefix: "scroll-mt",
				classPrefix: "scroll-mt",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-top",
				group: "interactivity",
			},
			{
				label: "Scroll Margin Right",
				prefix: "scroll-mr",
				classPrefix: "scroll-mr",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-right",
				group: "interactivity",
			},
			{
				label: "Scroll Margin Bottom",
				prefix: "scroll-mb",
				classPrefix: "scroll-mb",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-bottom",
				group: "interactivity",
			},
			{
				label: "Scroll Margin Left",
				prefix: "scroll-ml",
				classPrefix: "scroll-ml",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin-left",
				group: "interactivity",
			},
		],
	},
	{
		id: "scrollPadding",
		label: "Scroll Padding",
		members: [
			{
				label: "Scroll Padding",
				prefix: "scroll-p",
				classPrefix: "scroll-p",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-margin",
				group: "interactivity",
			},
			{
				label: "Scroll Padding Start",
				prefix: "scroll-ps",
				classPrefix: "scroll-ps",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-start",
				group: "interactivity",
			},
			{
				label: "Scroll Padding End",
				prefix: "scroll-pe",
				classPrefix: "scroll-pe",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-end",
				group: "interactivity",
			},
			{
				label: "Scroll Padding Y",
				prefix: "scroll-py",
				classPrefix: "scroll-py",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-y",
				group: "interactivity",
			},
			{
				label: "Scroll Padding X",
				prefix: "scroll-px",
				classPrefix: "scroll-px",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-x",
				group: "interactivity",
			},
			{
				label: "Scroll Padding Top",
				prefix: "scroll-pt",
				classPrefix: "scroll-pt",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-top",
				group: "interactivity",
			},
			{
				label: "Scroll Padding Right",
				prefix: "scroll-pr",
				classPrefix: "scroll-pr",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-right",
				group: "interactivity",
			},
			{
				label: "Scroll padding Bottom",
				prefix: "scroll-pb",
				classPrefix: "scroll-pb",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-bottom",
				group: "interactivity",
			},
			{
				label: "Scroll padding Left",
				prefix: "scroll-pl",
				classPrefix: "scroll-pl",
				types: ["number", "custom-property", "arbitrary"],
				values: {},
				var: "--builder-scroll-padding-left",
				group: "interactivity",
			},
		],
	},
	{
		id: "scrollSnapAlign",
		label: "Scroll Snap Align",
		types: ["enum"],
		members: [
			{
				prefix: "",
				classPrefix: "",
				values: {
					start: "snap-start",
					end: "snap-end",
					center: "snap-center",
					none: "snap-align-none",
				},
				var: "--builder-scroll-snap-align",
				group: "interactivity",
			},
		],
	},
	{
		id: "scrollSnapStop",
		label: "Scroll Snap Stop",
		types: ["enum"],
		members: [
			{
				prefix: "snap",
				classPrefix: "snap",
				values: {
					normal: "snap-normal",
					always: "snap-always",
				},
				var: "--builder-scroll-snap-stop",
				group: "interactivity",
			},
		],
	},
	{
		id: "scrollSnapType",
		label: "Scroll Snap Type",
		types: ["enum"],
		members: [
			{
				prefix: "snap",
				classPrefix: "snap",
				values: {
					none: "snap-none",
					x: "snap-x",
					y: "snap-y",
					both: "snap-both",
					mandatory: "snap-mandatory",
					proximity: "snap-proximity",
				},
				var: "--builder-scroll-snap-type",
				group: "interactivity",
			},
		],
	},
	{
		id: "touchAction",
		label: "Touch Action",
		types: ["enum"],
		members: [
			{
				prefix: "touch",
				classPrefix: "touch",
				values: {
					none: "touch-none",
					auto: "touch-auto",
					panX: "touch-pan-x",
					panY: "touch-pan-y",
					left: "touch-pan-left",
					right: "touch-pan-right",
					up: "touch-pan-up",
					down: "touch-pan-down",
					pinchZoom: "touch-pinch-zoom",
					manipulation: "touch-manipulation",
				},
				var: "--builder-touch-action",
				group: "interactivity",
			},
		],
	},
	{
		id: "userSelect",
		label: "User Select",
		types: ["enum"],
		members: [
			{
				prefix: "select",
				classPrefix: "select",
				values: {
					none: "select-none",
					text: "select-text",
					all: "select-all",
					auto: "select-auto",
				},
				var: "--builder-user-select",
				group: "interactivity",
			},
		],
	},
	{
		id: "willChange",
		label: "Will Change",
		types: ["enum", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "will-change",
				classPrefix: "will-change",
				values: {
					auto: "will-change-auto",
					scroll: "will-change-scroll",
					contents: "will-change-contents",
					transform: "will-change-transform",
				},
				var: "--builder-will-change",
				group: "interactivity",
			},
		],
	},
	/* svg */
	{
		id: "svgFill",
		label: "SVG Fill",
		types: ["enum", "color", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "fill",
				classPrefix: "fill",
				values: {
					none: "fill-none",
					...getTwColorClasses("fill"),
				},
				var: "--builder-svg-fill",
				group: "svg",
			},
		],
	},
	{
		id: "svgStroke",
		label: "SVG Stroke",
		types: ["enum", "color", "custom-property", "arbitrary"],
		members: [
			{
				prefix: "stroke",
				classPrefix: "stroke",
				values: {
					none: "stroke-none",
					...getTwColorClasses("stroke"),
				},
				var: "--builder-svg-stroke",
				group: "svg",
			},
		],
	},
	{
		id: "svgStrokeWidth",
		label: "SVG Stroke Width",
		types: ["number", "arbitrary", "custom-property", "length"],
		members: [
			{
				prefix: "stroke",
				classPrefix: "stroke",
				values: {},
				var: "--builder-svg-stroke-width",
				group: "svg",
			},
		],
	},
	/* Accessibility */
	{
		id: "forcedColorAdjust",
		label: "Forced Color Adjust",
		types: ["enum"],
		members: [
			{
				prefix: "forced-color-adjust",
				classPrefix: "forced-color-adjust",
				values: {
					auto: "forced-color-adjust-auto",
					none: "forced-color-adjust-none",
				},
				var: "--builder-forced-color-adjust",
				group: "accessibility",
			},
		],
	},
];

export const responsiveBuilderPrefixes = ["", "sm", "md", "lg", "xl"];
export const conditionalBuilderPrefixes = ["", "hover", "focus", "active", "group-hover"];
